第六章逐字宏
6.1更多的比喻吗?
一些最有趣的从保罗•格雷厄姆宏?逐字在Lisp宏。一个逐字宏观故意捕获一个变量的形式提供给宏。由于透明规范,这些故意捕获变量允许我们的窗户控制宏扩展。通过这些窗口我们可以通过组合操纵扩张。
经典搞笑像Lisp是命名的字面上的意思!照应语和它的复数,搞笑。一个照应语的一种手段获取一个免费的用于后续U-language U-language词。在编程方面,实现经典照应语意味着代码中发现的地方?或在代码中你想写什么?表达式可以受益于能够参考以前的结果,相关的表达式。格雷厄姆?年代重复法和相关代码值得仔细研究。尤其是看到defanaph macrojon-tisp-p223]使一些有趣的类型的自动照应语节目。
通过一段时间的使用,alambda已经发现的最有用的逐字宏Lisp。也是一种最简单和优雅的逐字的示威活动
1 U-language报价。
153
清单6.1:ALAMBDA
3;格雷厄姆?alambda (defmacro alambda(身体)及parm与身体吗?(标签((自我、及parm @body)) # ?自我))
宏和故意变量捕获。
alambda我们捕获这个名字自我以便我们可以用它来指我们正在构建的匿名函数。换句话说,递归调用一样简单的自我。例如,下面的函数返回一个列表吗?从n的数字1:
(alambda (n)(如果n (n > 0)(缺点
(自我n (- 1)))))
Alambda让我们的代码直观且易于阅读,并允许我们改变我们的想法是否一个匿名函数应该能够调用本身一样轻松地添加一个字母�因为Alambda ?透明规范自我约束力?事实上,用alambda的唯一原因就是利用这个绑定吗?不必要的变量捕获从来都不是一个问题。
另一个方便的逐字宏Lisp是如果,宏观结合的结果测试条款的真实(二级或顺向)利用oft条款。如果利用有价值的COMMON LISP特点:普遍的布尔值。共同之处
*如果条件是假的,一个没有第三条款如果形式返回零,这是一个列表。
?这是另一个原因不是sharp-quoteλ形式。改变大幅援引λ形式alambda形式还需要删除两个字符。
?练习:为什么假(三级或交替)条款从来没有利用这照应语吗?
清单6.2:AIF3;格雷厄姆?如果(defmacro aif(测试然后其他可选)测试)”(让(Cit)(如果它,那么,其他)))LISP,任何非nil值值是一个真正的布尔值所以COMMON LISP程序员通常在真值嵌入有趣的信息。有保留的真假值的语言吗?特别是计划?使用显式的布尔值,有时会迫使你扔掉额外的信息来满足冗余类型约束。方案已经添加了一个杂牌电脑允许如果,气孔导度,或者,和接受non-boolean�valuestrsrs-p2s]。COMMON LISP,当然,对吧?一切都是一个布尔值。
它还必须指出,如果和alambda,像所有逐字宏,违反词法透明度。一个时髦的说法这是目前说他们不卫生的宏。,像很多宏在这本书中,他们看不见地介绍词汇与宏观系统绑定,因此不能被创造,严格执行卫生。甚至绝大多数的计划系统,平台,有尝试最卫生,提供不卫生的defmacro-style宏?大概是因为没有计划实现者非常重视卫生。像自行车辅助轮,卫生系统的大部分玩具后,应该丢弃甚至得到了适度的水平。
是的,我们有很多有趣的事情可以和深思熟虑的变量捕获。有很多更多的比喻。这本书和格雷厄姆?在Lisp形容只有一小部分固有的潜在的这种技术。更多不可思议的发明出来的智能应用程序的宏。
经过短暂的插曲为主线介绍了通过阅读宏,本章的剩余部分描述了一个谦虚,特定的应用程序相关的搞笑的中心主题之一
根据计划�布尔?谓词。
清单6.3:SHARP-BACKQUOTE
(defun | # ?读者|(流sub-char numarg)(声明(忽略sub-char))(除非numarg (setq numarg 1)) ?(λ,(我从1到numarg收集循环(我)symb ?)�funcall (get-macro-character # \ ?)流nil)))
(set-dispatch-macro-character # \ # # \�#皘# ?读者|)这本书:词法闭包?让/λ。大多数这一章描述了有趣的逐字宏定制,适应和扩展闭包。虽然主题是非常实用的用于实际的代码,他们的主要目的是作为讨论平台的属性和变化的宏。使用宏来扩展一个闭包的概念是当前一个热门研究topicirirst-cLass-EXTENTS] [(OPENING-CLOSURES]。
6.2 Sharp-Backquote
尽管大多数重复法介绍了常规宏,读宏也有可能为我们介绍不可见的代码创建绑定。当读取宏这样做的时候,他们被称为阅读主线。本节提出了一个这样的阅读宏,虽然本身非常温和,甚至惊讶的自己是最持续的在这本书有用。我试图介绍这个宏尽快,以便它可以用于代码的其余部分。已经几个宏应该使用它。
Sharp-backquote是一个阅读的宏,它作为λ形式读入。默认情况下,这个λ的形式将一个论点:ai。阅读宏然后递归地调用读函数提供的流。这里有一个例子评估停止(引用)所以我们可以观察透明
介绍阅读的照应语#��* (al))
(λ(A1) * ((A1)))
这读宏观抽象出共同的宏观模式。例如,如果我们有一个变量列表和愿让列表绑定,将每个变量绑定到一个符号,说,空的,我们可以用mapcar一样:
* (mapcar(λ(a)(列出了?空)? (var-a var-b var-c))
((VAR-A ?空)(VAR-B ?空)(VAR-C ?空)
特别是对于复杂的表结构,这可以乱,所以lisp程序员喜欢用反敲了一个水平的报价:
* (mapcar (lambda (a) ?(,a ?empty)) ?(var-a var-b var-c))
((VAR-A ?空)(VAR-B ?空)(VAR-C ?空)
我们新的anaphor-introducing读宏隐藏了λ形式:
* (mapcar # ?�,艾尔?空)* (var-a var-b var-c))
�捕获的前缀符号,“a”,当然代表照应语。
((VAR-A ?空)(VAR-B ?空)(VAR-C空)
1性格的原因在上面的符号人工智能是阅读的用户宏可以介绍数量可变的搞笑根据数量提供给numarg读宏的参数:
* 7#2�,al ,a2)
(LAMBDA (A1 A2) ?(,A1 ,A2))
所以我们可以mapcar sharp-backquote跨多个表达式列表一次:
*�(让(var ? (var-a var-b var-c))) (mapcar # 2 ?(a2,艾尔? ?)var (v的循环在var收集(gensym(符号名的v)))))
((VAR-A ??#:VAR-A1731) (VAR-B ??#:VAR-B1732) (VAR-C ??#:VAR-C1733) )
另一种思考sharp-backquote是列出插值函数是字符串插值格式。正如格式让我们使用模板的槽充满独立参数的值,sharp-backquote让我们单独的插补值列表的结构我们想拼接。因为早些时候描述二元性λ之间的语法形式在功能列表的位置和λ形式使用λ宏扩展到一个函数,我们还可以使用sharp-backquote作为函数调用第一个元素:
* (# 3�((al)), @a2 (a3)) (gensym) (a b c) *你好)
(((#:G1734)) AB C (HELLO))
与格式,sharp-backquote不?使用顺序定位。相反,它使用数量在我们逐字绑定。因此,订单可以混合起来,我们甚至可以拼接在绑定不止一次:
*�(#3�((,@a2)) ,a3 (,a1 ,al)) (gensym) *(a bc) *hello)
((A B C)你好(#:G1735 #: G1735))
练习:引用gensym #: G1735看起来指向相同的符号,但是当然,你从来都不可以告诉gensyms通过看打印的名字。这些符号情商吗?为什么或为什么不呢?
6.3我们和有限状态机
有用的,如果只有一个λ逐字配置。但是最有趣的类型的宏利用扩张以不可预见的方式。本节吗?甚至最本章?是基于这样一个宏观:我们来。什么额外的绑定形式可能是有用的在体内的形式?让的目的是创建这样的绑定捕获变量介绍给一种让已经完成。然而,宏观增强让可以完全访问所有的形式,甚至表情的身体为了评估新的绑定。那么什么是最有用的身体的一部分吗?在大多数情况下它是最后的形式在体内
清单6.4:ALET-1
(defmacro我们% (letargs kr身体)?(让((这),@letargs) (setq, @(身体上))籃(但是身体)))
返回的结果形式将让语句本身?。我们吗?已经看到,当我们返回一个引用这些绑定由让lambda表达式,其结果是一个词法闭包?对象频繁存储和使用后让声明的变量的访问。扩展我们的closure对象类比,我们%宏观行为就像让特殊形式除了它抓住了象征这身体和绑定的最后一个表达式的形式?年代的身体吗?将返回一个关闭?。
我们%是有用的,当我们可以初始化代码λ形式我们也?不想重复。因为这是绑定到λ的形式返回,之前我们可以执行从封闭让返回它。下面是一个闭包的建筑显示了一个简单的例子使用我们%,避免重复重置和初始化代码:
*(我们%((总和)Gmul)(外贸))(funcall:重置)
(dlambda:重置()(psetq和0 mul 1外贸2))(t ()
(psetq sum (+ n)和mul (* mul n)
7因为我们提供了一个隐式progn。8 setq使用表单绑定到这个定义词法作用域的其他参数由letargs给出。
出口(出口食品外贸n))(列表和mul外贸))))
# <解释功能>
我们可以称之为先后改变的值和,mul,和外贸:
*(我从1到5收集循环(funcall * 2))
((2, 2, 4) 4 16 (4) (6, 8, 256) (8, 16, 65536) (4294967296) 10, 32)
我们现在可以重置关闭通过调用它:复位方法。请注意,我们只有写重置基本情况(mul 0, 1, 2外贸)在一个地方由于我们%:
* * * (funcall:重置)零
现在关闭?变量是重置,我们从一开始就能看到一个新的序列:
*(我从1到5收集循环(funcall * * * 0.5))
(0.5 1.4142135 (0.5)
(1.0 0.25 1.1892071) (1.5, 0.125, 1.0905077) (2.0, 0.0625, 1.0442737) (2.5, 0.03125, 1.0218971))
注意,让%的变化来评估订单的形式让身体。如果你看看过去形式扩张你会注意到在人体内是评价第一,和它的结果
清单6.5:我们
(defmacro我们(letargs kr身体)?(让((这),@letargs) (setq, @(身体上))籃(但是身体)(λ普克(params)(应用这个params))))
然后绑定到词法绑定过前面的形式进行评估。只要最后一个参数是一个常数,然而,这重新排序没有区别。记住,一个lambda表达式?是一个恒定值,因此非常适用于我们%。
正如许多宏观增强,因为许多可用的自由度,改进这个宏是违反直觉的。尽管有许多可能性,这部分考虑这样一个具体的改进。我们%可以在它的身体不会返回最后一次形式?我们预计是lambda形式?而是一个函数,查找另一个函数内让形式?词法作用域,然后调用该函数。这是有时被称为间接因为而不是返回一个函数,我们返回一个函数,使用指针查找函数,然后使用这个函数。间接概念中无处不在的编程语言有充分的理由。它让我们改变在运行时,在编译时没有间接,是固定的。Lisp让我们使用更简洁和高效的方式间接比许多其他编程语言。我们,我们的一个版本%与间接补充说,现在允许我们作为关闭返回的函数访问或取而代之的是代码在我们的身体内,或者,如果我们使用dlambda,很快就会显示,甚至在我们的身体。
现在我们可以改变时执行的函数调用闭包与我们让宏来我们可以创建两个相互引用的函数使用一种称为我们的模式
癉λ扩展为λ形式。
alambda。只要所有的状态回到原来的状态吗?而不是将对方吗?我们在alambda指定无名状态机是一种方便的方法。
下面是一个典型的柜台关闭,接受一个参数n, n的方向切换递增和递减,当我们通过符号转化为参数,而不是数字:
*(我们(中国商用飞机有限责任公司0))(alambda (n)(如果(eq n ?反)(setq(λ(n)(如果(eq n ?反)(setq # ?自我)(decf acc n)))) (incf acc n))))
# <解释函数>让吗?年代商店关闭所以我们可以经常使用它:
* (setf (symbol-function ? alet-test) *)
# <解释函数>当我们开始,我们将:
* (alet-test 10)
10
但是我们可以改变实际的函数被称为内部lambda表达式定义通过符号转化关闭:
* (alet-test ?反转)
# <解释功能>
现在我们吗?再保险下降:* (alet-test 3) 7
最后,感谢alambda提供的自我约束力,我们可以再次改变的函数被称为通过符号转化:
* (alet-test ?反转)# <解释功能>
回到我们开始的地方,上升:* (alet-test 5) 12
这个闭包已经绑定的函数名称空间alet-test象征。但这比定期关闭关闭略有不同。虽然这个闭包和正则闭包是指向一个环境,一个可以拥有任意数量的引用,这个闭包使用间接改变这段代码运行时调用。虽然任何一段代码可以安装,只有在我们的词法作用域,这照应语的可用,可以访问其词法绑定。但仍然没有阻止我们安装一个新的闭包,有自己的词汇绑定和可能改变行为的间接环境由我们来安装。本章的其余部分的大部分是有用的东西我们可以做与间接环境由我们来创造的。
一个常见的宏观技术是将一个宏。当你打开一个宏内外你选择一个典型的形式,使用类似宏的宏你想创建和扩大。然后使用扩张作为模板所需的宏。例如,我们想
更一般的方法创建闭包与多个国家比我们在alambda柜台了。这是上面的可逆计数器的内部扩张alambda使用
case:
* (macroexpand > (alambda (n)(如果(eq n ?反)(setq(λ(n)(如果(eq n ?反)(setq # ?自我)(decf acc n)))) (incf acc n))))
(标签(自我(N)(如果(EQ N ?反转)(SETQ(λ(N)(如果(EQ N ?反转)(SETQ # ?自我)(DECF ACC N)))) (INCF ACC N)))) # ?自我)
如果我们重构上面稍微扩张利用这一事实标签允许我们创建多个函数绑定!”,我们到达以下:
(我们(0 (acc))(标签(上升(n)(如果(eq n ?反)(setq #吗?向下)(incf acc n)))(向下(n)(如果(eq n ?反转)
0因此标签的多元性。
清单6.6:ALET-FSM
(defmacro alet-fsm普克(州)? (macrolet (((s) ? (setq # ? s)))(标签(@states) # ?,(caar))))
(setq # ?上升)(incf acc (- n))))) # ?上升)
从这一点,我们注意到alambda可以使用标签的特殊形式来提供它的所有绑定的所有身体的功能。什么?年代,我们现在有了一个相当完整的模板给我们最终的宏。
Alet-fsm给了我们一个方便的语法来表达中存在多种可能的状态为关闭。这是一个非常光宏的糖衣的标签,加上code-walking macrolet转换,允许我们假装好像一个函数,状态,可以改变关闭?当前状态,通过这种照应语由我们来提供。作为一个例子,这是一个干净的版本的可逆计数器:
(我们(0 (acc)) (alet-fsm(上升(n)(如果(eq n ?反)(国家向下)(incf acc n)))(向下(n)(如果(eq n ?反)(国家上升)(decf acc n)))))
Alet-fsm的实例是一个技术我们还吗?t见过:回指词注入。这个照应语的使用违反了词汇
透明度在很多方面,它实际上是不知何故,lezically无形的。不仅让绑定来这对我们来说不可见,但是使用这个由我们alet-fsm宏同样是看不见的。Alet-fsm注入一个自由变量进入我们的词汇上下文没有我们能够看到它在词汇上下文。
的文体问题这是不确定的!”,但是宏观规划,当然,不是关于风格。它是关于权力。有时自由变量注入可以创建两个宏之间的共生关系?一个可以通过编程构造扩张比两个孤立的扩张。因为这种类型的宏程序是复杂的,相似之处又可以吸引到C指针类比。就像学习C指针品种可疑的文体的建议,那么自由变量注入。
最合理的假设的来源困难理解自由变量注入是故障安全行为! ?。照应语,如果提供的用户代码?t使用绑定的代码可能会继续函数,是否你的目的。可能,默默地,因此un-safely失败。然而,当您将一个自由变量,没有环境捕捉整个表达式变得自由。,当这一切发生的时候,你需要决定要做什么才能评估这个表达式。它没有安全。
除了风格,自由变量注入有时仅仅是我们需要的,当我们想要两个来回沟通相关的宏。注入是真正执行的操作一样,搞笑,只是相反的方向。因为你是开辟了新渠道之间的沟通你的宏,规模更加迅速的复杂性问题。考虑坐在满屋子的脆弱的玻璃。你可以放心地把对象以外的人,即使他们不?t打扰抓住它们,但你最好确保你赶上扔回到你的任何对象。
天性,11 Ag)是所有风格问题。一旦完全理解的东西,风格变得无关紧要。自由变量注入还没有完全理解。
12个安全的,与真实的世界,没有尽快和尽可能大声是安全的。
清单6.7:ICHAIN-BEFORE
(defmacro !ichain-before (kr) ?(让(g !indir-env这个(λ))(setq普克g ! temp-args籃身体(应用g !indir-env g ! temp-args)))))
6.4间接连锁
有很多方法我们可以利用这个照应语由我们来提供。由于环境是通过一个虚拟关闭,将所有调用转发到真正的关闭指出,我们可以通过虚拟闭包引用,复制它。间接这样有用,因为我们可以改变时会发生什么这假闭包调用,而无需改变引用假关闭。
Ichain-before旨在扩大我们的形式。它增加了一个新的身体之前执行的代码调用主关闭。回到我们的反例,ichain-before让我们添加一个新的闭包,打印前关闭了acc变量的值之前,提前和增量:
*(我们(中国商用飞机有限责任公司0))(ichain-before(格式t“改变从~ ~ %”acc))(λ(n) (incf acc n)))
# <解释函数>按预期工作:
* (funcall * 2)从0变化
2 *�(funcall * * 2)改变从2 4
有一个原因我们把链ichain-before的名义,。我们可以把这些闭包在我们请执行:
*(我们((acc 0)) (ichain-before(格式t ~ %)) (ichain-before(格式t B ~ %)) (ichain-before(格式t C ~ %))(λ(n) (incf acc n)))
# <解释功能>
链中的每个添加新的链接添加链接到最开始的链,导致在相反的顺序访问的链接,他们说:
(funcall * 2)
* C B A 2
静态增加间接连锁变化时有时是有用的宏,以避免重组宏周围通过添加新的代码。但最有趣的可能性为间接连锁弹出当我们动态地添加它们。因为我们可以在运行时创建新的闭包,因为我们可以访问一个闭包的内部通过一个照应语,我们可以重写
函数在运行时工作。这里是一个简单的例子,每个调用闭包添加另一个输出“Hello world”的代码运行时:
*(我们(0)(acc)(λ(n) (ichain-before t“Hello world ? %)(格式)(incf acc n)))
# <解释函数>间接链上的每一个调用添加一个新的闭包:
*(我从1到4个循环
(格式t”?:r调用:~ %”我)(我)funcall *)
第一个调用:
第二个调用:
你好，世界
第三个调用:
你好，世界
你好，世界
第四个调用:
你好，世界
你好，世界
你好，世界
类似于ichain-before ichain-after宏宏除了它将闭包添加到的另一端执行链:主要关闭后调用。Ichain-after使用progi,执行其提供形式连续然后返回的结果评估第一个表单。
Ichain-before和ichain-after可以结合之前的形式执行之前的评价主要关闭和之后形式后:
清单6.8:ICHAIN-AFTER
(defmacro !普克ichain-after(身体)?(让(g !indir-env这个(λ))(setq (kr g ! temp-args) (progl(应用g !indir-env籫! temp-args)籃身体)))))
*(我们((acc 0)) (ichain-before(格式t“改变从~ ~ %”acc)) (ichain-after(格式t”改变了~ ~ %”acc))(λ(n) (incf acc n)))
# <解释函数> * (funcall * 7)改变从0更改为7
7
Ichain-before和ichain-after宏自由变量注入他们的扩张。他们注入标志这我们依靠被扩张我们的宏。这种注射的符号可能似乎是坏的风格或容易出错,但它实际上是一个常见的宏观方法。事实上,几乎所有的宏注入符号扩展。例如,而且,宏观ichain-before也注入符号像让setq,λ拼接到无论宏展开。符号的区别和预先定义的符号像setq,λ总是指的是一个容易理解的ANSI宏,这样的符号可以参考不同的事情取决于环境中扩大。
清单6.9:ICHAIN-INTERCEPT-1
(defmacro !普克ichain-intercept %(身体)?(让(g !indir-env这个(λ))(setq(普克g ! temp-args)(块拦截(progl
(应用g !indir-env籫! temp-args)
The basket body))))))
Ichain-before和ichain-after用于标记代码关闭之前或之后运行原来的封闭表达式的执行,但绝不是唯一的事情我们可以做这种照应语。另一个常见任务是检查的有效性后关闭数据的调用闭包。
Ichain-intercept %是另一个宏观设计用于在一个我们的形式。我们的想法是,我们希望能够拦截调用闭包和验证操作的执行没有?t导致关闭一些不一致的状态。
所以我们可以添加一个拦截我们通常柜台关闭如下所示:
*(我们(0)(acc) (ichain-intercept %(当(< acc 0)(格式t“acc - ~ %”) (setq acc 0)(从拦截acc)))(λ(n) (incf acc n)))
# <解释功能>
当计数器低于0,ichainintercept安装的代码吗?将警告我们:
清单6.10:ICHAIN-INTERCEPT
(defmacro !普克ichain-intercept(身体)?(让(g !indir-env这个(λ))(setq (kr g ! temp-args)(块,g !拦截(macrolet (Cintercept (v) ?(回来�,gtintercept
2 v))) (progl(应用g !indir-env籫! temp-args)籃身体)))))))* (funcall * 8) Acc - 0
柜台重置回0:* (funcall * * 3) 3
最有趣的事ichain-intercept %,它引入了一个块照应语命名的拦截。使用这个照应语我们使用回来。块从闭包调用将返回这个值,拦截原始值。
ichainintercept捕获块照应语拦截,而是创建一个本地宏允许代码在ichain-intercept使用拦截扩张到一个指定的块returnfrom gensym。
*(我们(中国商用飞机有限责任公司0))(ichain-intercept(当(< acc 0)(格式t“acc - ~ %”)
(setq acc 0)(拦截acc)))(λ(n) (incf acc n)))
# <解释函数>这是ichain-intercepts一样:
*�(funcall * 8) Acc - 0
* (funcall * * 3)
3
当然,所有这些闭包透明地引入操作会影响运行时性能。幸运的是,现代的lisp编译器非常善于优化闭包。如果您的应用程序可以站几个取消引用指针吗?通常它可以吗?间接链结构可能是最好的办法。参见7.4节,指针范围的另一个有趣的方法间接链。也看到秘密地吗?年代前、后和功能。
6.5 Hotpatching闭包
有三个用途这一重要部分。首先,另一个有趣的使用我们这种回指词的描述。第二,我们在讨论dlambda模式。最后,一个有用的宏称为照应语的技术关闭了。
为了清楚地说明照应语关闭,我们不会与我们合作宏观而是一个内部扩张。Alethotpatch %是我们特别λ的扩张形式提供。这个检查第一个参数λ形式!看到
13用指针比较。
清单6.11:ALET-HOTPATCH-1
(defmacro alet-hotpatch %(普克letargs身体)?(让((这),@letargs)
(setq, @(身体上))
Basket (butlast body)
(lambda (krest args)
(如果(eq(汽车args) ?: hotpatch)
(setq (cadr args))(应用这个args)))))
如果关键字:象征hotpatch,如果是这样,取代了间接关闭与另一个提供参数。
能够改变关闭用于另一个转发闭包在运行时被称为hotpatching。例如,在这里,我们创建一个hotpatchable闭包并将其存储在symbol-function hotpatch-test象征供以后使用的细胞:
* (setf (symbol-function ? hotpatch-test) (alet-hotpatch % (0) (acc)(λ(n) (incf acc n))))
# <解释功能>
现在可以使用它就像这样:
*
(hotpatch-test 3)
*�WwW
(hotpatch-test 4)
我们可以取代λ形式?与其相关的环境?通过调用这个闭包的象征:hotpatch和替代功能或关闭:
* (hotpatch-test
清单6.12:ALET-HOTPATCH
(defmacro alet-hotpatch(普克letargs身体)?(让((这),@letargs) (setq, @(身体上))籃(但是身体)(dlambda (: hotpatch(关闭)(setq这个闭包))(t(普克args)(应用这个args)))))
:hotpatch (((ace 0))(λ(n)
(incf acc (* 2 n)))))
# <解释函数>现在关闭将有新的hotpatched行为:
* (hotpatch-test 2)
4 * (hotpatch-test 5)
14
注意,计数器值重置为0,因为我们也hotpatched关闭吗?环境的一个新值计数器?蓄电池,acc。
天堂吗?我们见过这种类型的运行时解构关键字符号?是的,事实上,我们写一个宏做这个在5.7节,Dilambda。Alet-hotpatch是一种利用dlambda alet-hotpatchy %。有时甚至没有意识到这一点,通过使用宏定义中我们之前写的新宏,我们执行宏的组合。与精心设计的宏可以完全理解和扩张,尽管它可能违反词汇的透明度
清单6.13:LET-HOTPATCH
(defmacro !let-hotpatch(普克letargs身体)?(让((g !这),@letargs) (setq g !,@(身体上))籃(但是身体)(dlambda: hotpatch(关闭)(setq g !这个闭包))(t(普克args)(应用g !这args)))))
许多方面,没有结合问题出现,因为所有的组件组合在一起有意义。
Alet-hotpatch创建一个hotpatchable关闭但有一个轻微的概念上的缺陷。因为使用alet-hotpatch唯一的真正原因是创建这种hotpatchable关闭,我们可能会忘记,也介绍了照应语这种形式提供的范围。当我们忘记搞笑吗?已经创建,我们不必要的风险变量捕获问题。为了避免这些问题,我们可能会选择使用一种技术称为照应语关闭。当我们接近一个照应语,我们不?t需要改变我们的逐字宏函数的方式,限制他们的方式相结合。
因为我们已经把我们内部扩张,我们看词法的创建这照应语alet-hotpatch的定义。因为alet-hotpatch还包含的代码使用这个实现hotpatching照应语,我们可以关闭照应语的象征这是不再被宏。我们通常如何避免引入不必要的绑定吗?当然我们的名字绑定使用gensyms。
Let-hotpatch是关闭这个照应语的一个例子更包含版本吗?当hotpatching安全版本,是必需的。领导被撤的名称表明这个新宏不再介绍一个照应语的身体提供代码。当然,如果我们想把这种由于某种原因除了hotpatching,我们应该敞开的照应语。
这种技术的打开和关闭搞笑之后成为第二天性的你写了足够的宏。就像我们可以编写宏,扩大注入自由变量没有思考我们如何捕捉它们,直到我们写的词汇上下文将扩大,我们有时会选择离开照应语开放而发展中宏试验组合的宏和自由变量注入宏。一旦发现最有用的组合,我们可以一起合并宏,替换所有搞笑,与gensyms在开发和使用。像let-hotpatch一样,这种技术可以使用defmacro !把照应语吗?年代从宏扩展到宏观范围的定义。而不是词汇方面引入一个照应语,我们介绍了另一种类型的照应语吗?一个不?t生效完整的词法作用域的扩张在另一个,但只有有限的范围。这个范围是在以下部分进一步描述。
6.6 Sub-Lexical范围
我们的defmacro !macro-defining宏,我们在3.5节中定义,意外捕获寻找自动gensyms的存在所提供的代码使用格雷厄姆?年代平效用。现在是时候承认一个小谎言我们告诉过这本书。在现在,因为我们没有?t解释自由变量注入和搞笑,我们假装在defmacro G-bang符号名称!定义适用于宏观的词法作用域的定义。这实际上是不真实的? defmacro !提供这些绑定在一个稍微不同的类型的范围称为sub-lexical范围。
记住范围意味着引用一个变量是有效的和词法作用域意味着名称适用于代码的文本身体绑定让等构造。词法作用域和sub-lexical范围之间的重要区别是词法作用域,这包括所有宏观展开的代码让身体。所以描述词法作用域创建变量只访问代码绑定的文本的身体构造是一个谎言吗?宏可以注入变量引用。这样的
从文本外部变量注入身体构造的绑定。
实现真正的文本范围的可能方法通过限制访问词法变量导致sub-lexical范围。引用一个sub-lexically作用域的变量只有有效如果符号代表他们发生在原始列表传递给lisp宏展开之前。
因为defmacro !预处理的代码,创建列表的所有G-bang符号代码扩展之前,G-bang符号sub-lexically绑定。我们可以吗?t编写宏defmacro注入G-bang符号!因为词汇绑定G-bang符号没有创建。这是一个典型的使用sub-lexical G-bang符号:
* (defmacro !垃圾()?(让(g ! var))籫ivar))
垃圾
G-bang符号都发现在sub-lexical defmacro的范围!所以扩张是我们期望:
* (macroexpand吗?(垃圾))(让()
(((#:VAR1663)) #: VAR1663))
然而,为了探索sub-lexical范围的概念,我们将定义一个宏,注入G-bang符号:
* (defmacro injector-for-g !var () > ?glvar)
INJECTOR-FOR-G !VAR
现在我们可以写junk2。Junk2是相同的垃圾,除了我们已经取代了G-bang符号的宏展开成一个G-bang符号:
*�(defmacro !junk2() ?(让(((injector-for-g ! var))), (injector-for-g ! var)))
JUNK2
但自从G-bang符号sub-lexically绑定吗?因此不?t调查形式的宏观扩张? defmacro !不?t这些符号转换成自动gensyms:
* (macroexpand ? (junk2))
(让()(((G ! VAR)) G吧! VAR))
虽然上面的代码仍将函数,sub-lexically作用域的变量引用表达式可以打破一些引用,引用变量时存在于sub-lexical范围和其他人不?老师:
* (defmacro !junk3 () ? (((g ! var)), (injector-for-g ! var)))
JUNK3 * (macroexpand ?(junk3))
(LET () (LET ((#:VAR1672)) G!VAR))
Sub-lexical范围出现意外经常在复杂的宏。以及defmacro !,我们呢?已经看到它在至少一个其他的例子:从5.6节with-all-cxrs宏,递归解决方案sub-lexically绑定列表访问器功能。sub-lexical绑定的结果是,我们可以吗?t是指从宏展开这样的绑定。有时这访问限制是有用的,有时不是。在with-all-cxrs, sub-lexicality可能被认为是不可取的。当我们访问器在with-all-cxrs ?年代sub-lexical范围,没有问题:
* (with-all-cxrs (cadadadr nil))
NIL
我们甚至可以编写宏扩展到这些访问器,只要宏定义sub-lexical with-all-cxrs的范围:
* (with-all-cxrs (macrolet(访问器(1)吗? (cadadadr 1)))(访问器nil)))
NIL
但是请注意with-all-cxrs结合访问器函数sub-lexically所以我们可以吗?t注入访问器定义一个宏:
* (macrolet((访问器(1)? (cadadadr 1))) (with-all-cxrs(访问器nil)))
这个函数没有定义:CADADADR
现在我们熟悉主线和看到了许多复杂的宏的例子吗?包括一些使用
清单6.14:LET-BINDING-TRANSFORM
(defun let-binding-transform (bs) Cif bs(缺点(电导率((symbolp(汽车bs))(列表(汽车bs))) (Cconsp(汽车bs))(汽车bs)) (t(错误“坏让绑定”)))(let-binding-transform (cdr bs)))))
sub-lexical范围?我们可以讨论一个有趣的理论宏观:转租。这个宏是用来创建sub-lexical绑定代码使用语法类似于通常的形式语法。转租的讨论,和许多lisp宏一样,始于一个实用程序。
Let-binding-transform是一个简单的工具,它处理的情况下让表单绑定作为一个单一的象征。在下面,正常化(a):
* (let-binding-transform
* Ca (b) (c�nil)))
((A) (B) (C NIL))
转租也使用树叶工具我们在5.8节中定义,隐式上下文。回想一下,树叶宏接受三个参数:一个任意表结构,一个表达式,该表达式可以使用x变量来确定是否应该改变,一片叶子,另一个表达式,可以使用不同的x来确定有效的叶子应该改变了。
选择implicitise x的绑定名称相同的证明是一个有用的syntaz的二元性。当我们可以吗?t因子表达式中常见的代码通常的方式,有时我们可以获得这种简洁的优势通过使用语法双刀在其他方面。转租的定义使用4.5节中描述的自我参照阅读宏,循环表达式。尤其是对事情
清单6.15:转租
(defmacro转租(bindings4 kr身体)(((绑定(let-binding-transform绑定%)))(setq绑定(mapcar(λ(x)(缺点(gensym(符号名(汽车x))) x))绑定))?(让(@ (mapcar # ?列表(mapcar # ?汽车绑定)(mapcar # ?caddr绑定))),@(树叶身体# 1 =(关键成员x绑定:# ? cadr) (caar # 1 #)))))访问器,可以改变很多次在程序的编写,阅读宏允许我们有一个且只有一个代表访问器形式。由于我们使用implicitisation树叶的宏,它很容易找到和理解代码重复,因为代码是接近的。
转租的代表让我们绑定和适用let-binding-transform效用,产生新的表结构。然后加!* gensym每个绑定一个打印名称对应绑定名称。转租展开成一个让表单绑定这些gensym符号的值传递到绑定的形式,然后使用树叶去替换出现的所有绑定名称符号与它们相应的gensyms所提供的代码。转租不扩大任何宏或解析任何特殊形式在体内寻找出现这些绑定名称符号,因为转租创建sub-lexical绑定。例如,如果所有引用sub-lexical,它将取代他们gensyms:
* (macroexpand
? 4而不是加附加所以我们仍然可以支持绑定没有默认值,如(a)。
(转租((0))(列表)))
(让((#:A41657 0))(#名单:A41657)) T
然而,由于sub-lexical范围并吗?t涉及扩大宏,因此必然不?t涉及口译报价之类的特殊形式,象征的实例是吗?t应该是变量引用也改变了:
* (macroexpand >(转租((0))(清单?)))
(让((#:A1658 0))(清单? #:A1658)) T
Sub-lexical生效范围列表结构解释为lisp代码之前,您的系统?code-walker。这是一个重要的观察?的影响仍未完全探索。转租解释不同的代码比提供的code-walker COMMON LISP。
我们站在一个宏观了解许多边缘。什么样的有趣的类型范围介于未展开的sub-lexical范围和完全展开词法作用域?因为缺乏一个更好的名字,我们将称之为无限大一类范围超级sub-lexical范围”。
一个相当明显的超级sub-lexical范围使用转租*。这个宏使用下面转租,但改变身体的每个表单通过宏观扩大macroexpand-1函数。现在,而不是出现在原始列表结构,引用符号必须发生后宏扩展的第一步。这
15 t给这愚蠢的名字,因为我期待更好的名字成为明显的概念时更好的理解。
清单6.16:转租*
(defmacro转租*(身体绑定kr) ?(转租、绑定
籃(mapcar # ?macroexpand-1身体)))
类型的超级sub-lexical范围允许一个宏的形式?年代的身体注入或删除引用的范围。如果宏不?做这些事情?或者如果形式是?t宏吗?这种类型的超级sub-lexical范围行为就像sub-lexical范围:
* (macroexpand >(转租*((0))(列表)))
(让((#:A1659 0))(#名单:A1659)) T
但是我们可以定义另一个注射器宏观测试这个超级sub-lexical范围:
* (defmacro injector-for-a () 2 a)
INJECTOR-FOR-A转租*将扩大这个注射器宏:* (macroexpand-1 ?(转租* ((0))(INJECTOR-FOR-A)))(转租((0))
一)T
然后被sub-lexically转租,这意味着注入变量存在转租所提供的超级sub-lexical类型范围内:
* (macroexpand-1 *)
(让((#:A1663 0)) #: A1663)
但嵌套表达式中宏不扩大了macroexpand-1所以转租* ?t放进sub-lexical转租看到的范围:
* (macroexpand-1 ?(转租*((0))(列表(injector-for-a))))
(转租((0))(列表(INJECTOR-FOR-A))) T
所以不是捕获sub-lexically ! *:
*(沃克:macroexpand-all *)
(让((#:A1666 0))(列表)
转租,转租*我们可以控制在什么程度的宏扩展一个变量被认为是有效利用sublexical或超级sub-lexical范围。正如上面提到的,超级sub-lexical实际上是无限类的作用域范围,几乎是完全没有被探索过的智力。很多方面如有走代码(很多)有超级sub-lexical范围。这类作用域通向另一个类别的经过探索宏:宏lisp宏是如何工作的变化,当
16 valker: macroexpand-all完整codewalker CMUCL组成部分。
他们正在扩大,引用有效,如何解释的特殊形式,等等。最终,macro-programmable宏观扩展器。
6.7 Pandoric宏
潘多拉?年代bor希腊神话是关于世界?第一位女:潘多拉。潘多拉,U-language符号,从希腊到all-gifted翻译。女人,潘多拉是受到好奇心的诱惑,打开小盒子已经无可挽回地释放所有的人类吗?邪恶和罪恶的世界。而在这一节中描述的宏是非常强大的并且可能教你一种编程你永远不会忘记,放心,我们的结果将远比可怜的潘多拉呢?。打开这个盒子。
首先我们需要稍微绕道通过另一个著名的lisp书:lisp在小Piecesismavi-pices基督教Queinnec |。Queinnec lisp是一个广受尊敬的专家和我们的lisp知识作出了巨大贡献。Queinnec吗?年代的书是关于实现不同复杂的编译器和解释器在Scheme编程语言和! ?。
在小块的Lisp宏是一个短暂而有趣的讨论。相关的描述不同的宏观系统的差异可能由于计划宏观规范的模糊!�但也有一些有趣的笔记为什么我们可能想要使用宏和如何使用它们。如果你有阅读和理解第3章,宏观基础,大部分的宏Lisp的章节中给出对宏将小块,你属于琐碎的类别,拯救一个诱人的宏,现在我们将讨论。
像许多编程书籍,Lisp在小块需要我们,让我们在一个系统的实现面向对象编程。通常这些实现服务大纲名下的一个子集,COMMON LISP对象系统。Queinnec MEROONET称其子集。Queinnec讲话,
7虽然有时描述其他地及其特性。18个谢谢,但是没有谢谢。
MEROONET类在定义一个方法就好了可以直接引用对象的字段定义,而不是使用访问器。在Queinnec吗?(翻译)[smatt的话
件- p340 - 341) ?
让吗?年代的情况,例如,宏观withslots的名下;我们吗?它适应MEROONET上下文。对象的字段让?说点的一个实例的字段?是由读写函数像点x或set-Point-y !。是简单的直接处理它们的名字字段,x或y,例如,在定义一个方法的上下文。
这是Queinnec吗?年代所需接口(他称为def ine-handy-method)定义一个新的方法,双:
(define-handy-method(双(o点))(设置!x (* 2 x))(集合!y y (* 2) o)
否则更令人愉悦的程序员比必要MEROONET语法:
(定义方法(双(o点))(set-Point-x !o (* 2 (x 0))) (set-Point-y !o (* 2 (y 0 o))))
换句话说,它就好了如果我们可以使用宏来访问外国绑定?在这种情况下,对象槽?好像他们是词法绑定。虽然这无疑是有用的缩写为目的,其最重要的意义在于它能给我们现有的和未来的二元性语法宏。
Queinnec指出,COMMON LISP实现此功能的秘密地称为有缝隙的宏。这是一个COMMON LISP的例子做它是为了做什么:允许基于抽象提炼,标准化的宏观系统。虽然大多数语言被设计成容易实现,
清单6.17:PANDORICLET
(defmacro pandoriclet (letargs kr身体)(((letargs(缺点>(这)(让-binding-transform letargs)))) ?(让(@letargs) (setq, @(去年),@(但是身体)(dlambda (: pandoric-get(对称),�pandoriclet-get letargs)) (: pandoric-set(信谊val)�pandoriclet-set letargs)) (t(普克args)(应用这个args))))))
常见LIspP被设计成强大的程序。Queinnec吗?结论是,语言的局限性使计划,这是不可能的尤其是在可移植性要求:
[Llacking反射信息的语言和它的实现,我们不能写一个便携式code-walker计划,所以我们不得不放弃def ine-handy-method写作。
尽管CoMMON LIsP仍然允许大量的法律方法来实现宏观系统,它的目的是提供一般的元编程工具,在标准和可移植的方法。两个高级COMMON LISP宏功能使我们能够实现诸如秘密地?年代有缝隙是普遍变量和符号宏。本节利用一个机会来展示这个奇妙的融合COMMON LIsP的特性以及汇集到目前为止,我们看到的所有东西都关于逐字宏,在这个过程中发现一个有趣的类称为pandoric宏的宏。
pandoriclet背后的想法是打开关闭,否则让他们关闭了词法变量访问外部。就像我们之前的一些宏alet-hotpatch,
pandoriclet编译一个间接的环境选择不同的运行时行为根据传递的参数。

我们在两个调用list-creating效用函数未定义:pandoriclet-get pandoriclet-set,每一个都接受一个让绑定列表。注意到我们可以引用的函数吗?t存在只要我们之前定义宏扩展,显然可以吗?t发生之前我们使用宏。使用辅助函数来帮助定义宏是一个好习惯。它不仅能让你定义更具可读性,还可以帮助在测试组件的宏观和将来可以证明有用的宏。关于这种抽象的最好的部分是,当结合宏,我们把词汇上下文可用工具使用。
记住词汇上下文,我们写pandoricletget和pandoriclet-set。pandoriclet-get,我们记住dlambda绑定变量符号在我们的列表将拼接的地方。我们使用对称的形式与符号进行比较,通过pandoriclet !�如果我们发现一个符号,绑定它的当前值是指返回。如果不是,则抛出一个错误。Pandoriclet-set几乎是相同的,除了dlambda绑定一个额外的符号的使用:瓦尔。
回想一下,情况比较每箱符号编译到一个指针。
清单6.18:PANDORICLET-ACCESSORS
(defun pandoriclet-get (letargs) ?(例sym籕@ (mapcar # ? (?汽车铝))、(汽车))letargs) (t(错误”未知pandoric得到:
信谊))))
(defun pandoriclet-set (letargs) ?(例sym籃(mapcar # ?(((汽车ai)) (setq,(汽车)val)) letargs) (t(错误”未知pandoric集:信谊val))))
alPandoriclet-set使用setq改变符号引用绑定到瓦尔。
Pandoriclet提供了相同的接口,我们所有的逐字让变异,所以我们可以使用它来让我们常用的计数器关闭:
* (setf (symbol-function ?裤子)(pandoriclet (0) (acc)(λ(n) (incf acc n))))
# <解释函数>按预期工作:
* (pantest 3)
*
(pantest 5)
然而,现在我们有直接访问被称为acc关闭时创建的绑定:
*(裤子:pandoric-get ? acc) 8
我们同样可以改变这个绑定的值:*(100年气喘:pandoric-set ? acc)
100 * (pantest 3)
103
即使我们这种回指词的价值可以,因为我们故意敞开的照应语和这个符号添加到letargs绑定列表扩展宏时:
*(裤子:pandoric-get ?) # <解释功能>
所以这个闭包吗?已经创建pandoriclet已经不再关闭。这个闭包所使用的环境吗?即使所有的词法变量符号由编译器已被移除?还可以通过我们的匿名函数从pandoriclet回来。这是如何工作的呢?pandoric宏,额外的代码被编译为从外部访问闭包的一种方法。但pandoric宏的力量可以吗?t被看这个低级的观点正在发生的事情。我们所做的是创建了一个inter-closure协议,或消息传递系统,关闭之间的通信。
在我们继续pandoric宏之前,首先我们需要指出最重要的一个二元性的例子在COMMON LIsP的语法:普遍变量。这是复杂的细节,我赢了?t描述他们在这里。我建议格雷厄姆?在Lisp的最佳治疗我知道。细节是微妙的想法很简单:访问一个普遍变量语法双重设置它。你有
清单6.19:GET-PANDORIC
(朗读(内联get-pandoric)) (defun get-pandoric信谊(框)(funcall框:pandoric-get sym))
(defsetf get-pandoric信谊(框)(val) ? (progn (funcall框:pandoric-set,信谊,val)籿al))只有一个setter形式,setf,能够设置所有类型的变量通过使用相同的语法可以使用访问它们。
例如,使用一个正则变量通常通过它访问其价值符号,说,x。设置,您可以使用(setf x 5)。同样,访问汽车槽的缺点,说,x,你使用(汽车x)设置,您可以使用表单(setf(汽车x) 5)。这隐藏实际的方法设置一个rplaca缺点是使用函数。通过实现这种二元性的语法我们减少一半数量的访问器/ setter我们需要记住,最重要的是,让我们使用宏新方法。
函数get-pandoric包装interclosure协议getter语法。是朗诵内联消除这个包装性能造成的影响。
Defsetf是一个有趣的COMMON LISP宏不完全与我们的defmacro !扩展defmacro周围,它隐式绑定gensyms形式提供。Defsetf作品的定义setter普遍变量的二元性,只要getter可以表示为一个评估它的所有参数的函数或宏到底一次。注意,尽管get-pandoric可以被定义为一个宏,唯一的原因就是用于内联。宏不是为内联,编译器内联。
回到我们的存储在symbolfunction pandoric计数器的裤子,我们可以使用这个新的getter函数来检索当前值的裤子?acc绑定:
* (get-pandoric # ?裤子? acc) 103
现在,由于普遍变量和defsetf,我们可以使用一个句法双重设置:
* (setf (get-pandoric # ?裤子? acc) -10) p页
-10 * (pantest 3)
7 -
封盖功能的环境?我们什么?在λ已经打电话让让?开始看起来像定期访问普遍变量,就像一个缺点细胞或一个哈希表条目。闭包是现在比以前更一流的数据结构。绑定以前关闭外部代码现在为我们敞开的修补,即使这些绑定编译为有效和长期以来访问器符号被遗忘。
但是任何讨论普遍的变量是不完整的没有提到其近亲属:符号宏。Symbolmacrolet,就像它的名字所暗示的,允许我们符号扩展到一般lisp形式。因为它是直观的和更灵活的使用形式看起来像函数调用代表宏观转换”,没有?t多用于symbol-macrolet拯救它的一个重要应用是至关重要的:符号宏让我们隐藏普遍变量,这样用户宏认为他们正在访问常规词法变量。
符号宏的引入导致了奇怪的组装件的常见的一种LISP语言:通常情况下,当设置一个变量通过定期访问的象征,就像(setf x t) setf将扩大到setq因为这是形式
20符号宏不带参数宏定义总是扩大相同的一个标志。
清单6.20:WITH-PANDORIC
(defmacro !with-pandoric(信谊o !箱布雷斯特的身体)? (-macrolet符号(@ (mapcear # ?(a1 (get-pandoric g !箱子吗?,a1))信谊)籃身体)什么setq最初被设计成:设置词法和动态变量(总是被符号)。但setq特殊形式不能普遍变量设置,因此,当宏象征和符号很可能代表介绍了不仅仅是一个词汇/动态绑定,而是任何普遍变量,有必要要求setq形式设置符号与符号宏定义转换回setf形式。奇怪的是,这真的是正确的,因为它允许宏,完全隐藏的存在普遍从宏观变量?用户,即使他们选择使用setq。真正正确的解决办法是删除冗余setq语言支持的更一般的setf,但这不会发生,原因显而易见的兼容性和宏创建期间因为setq也可以是一个有用的安全快捷方式?setf加上一个检查一个符号被拼接在列表的形式。当使用setq这个记住它只是帮助其拼接安全财产;当我们吗?已经看到的那样,一个符号可以引用任何由于symbol-macrolet普遍变量。
with-pandoric宏展开成一个symbol-macrolet定义一个宏信谊中提供对每个符号象征。每个符号宏将扩大其符号引用词法作用域的symbol-macrolet到普遍变量引用使用我们get-pandoric访问器/ setter来访问的结果评估的第二个参数宏:啊!箱(存储在g !盒)。
所以with-pandoric让我们窥视一个闭包?s关闭/变量绑定:
玿(with-pandoric (acc) # ?裤子
(格式t“acc的价值:~ ~ %”acc) acc)值:7零
按我们的设计使用普遍的变量来形成一个句法双这个变量的设置和获取,我们甚至可以假装它是一组常规词法变量,它与setq:
*�(with-pandoric (acc) # ?裤子(setq acc 5))
5 *�(pantest 1)
6
我们现在看的大多数pandoric宏。首先,宏观创建闭包:pandoriclet,捕捉照应语,这指的是实际的函数调用时使用闭包。这个宏也在一些特殊的编译代码,截取特定调用的这个闭包,而访问或修改其关闭了词法变量。第二,一个语法访问和设置一个访问器是实现get-pandoric和defsetf。最后,宏观with-pandoric使用symbol-macrolet安装这些普遍变量作为看似新的词法变量以相同的名称为关闭了变量。这些变量是指原始环境创建pandoriclet,但是从单独的词汇上下文。
作为一个例子,我们将这种能力与开放闭包通过比较hotpatching宏从6.5节,hotpatching闭包。回想一下,alet-hotpatch及其封闭的照应语的表妹,let-hotpatch创建闭包与一个间接的环境,这样关闭时调用的函数调用可以改变。这些宏的最大限制是他们强迫你扔掉所有的词汇时,关闭前匿名函数绑定
清单6.21:PANDORIC-HOTPATCH
(defun pandoric-hotpatch(箱)P P (with-pandoric(这)框(setq这个新)))
你hotpatched它。这是不可避免的,因为当我们写这些宏的闭包被关闭。
alet-hotpatch和let-hotpatch,我们必须编译专用的代码到每个闭包可以设置这个逐字词法绑定到它的新价值。但是由于我们现在可以打开一个闭包定义pandoriclet和外部运行setter代码,我们可以定义一个hotpatching函数pandoric-hotpatch将与任何pandoric关闭。
有时只是觉得抽象,很难确切地说为什么。可能是因为大多数编程的不和谐的结合是不相交的部分,这是令人惊讶的和愉快的,当你发现抽象?看似偶然的机会呢?配合完美。Pandoric-hotpatch似乎读就像它是如何工作的:它打开一个pandoric接口,需要从词法作用域的变量的关闭盒子,然后使用setq设置关闭hotpatched在,新的。
我们甚至可以使用pandoric-hotpatch pandoric关闭之前我们创建hotpatchable知道我们想要的。记得柜台关闭在这一节我们一直玩?它仍然应该绑定到symbol-function喘气的象征。我们是6点和计算:
* (pantest 0) 6
让吗?安装一个新的闭包?有一个新的绑定acc从100年开始,和倒计时:
* (pandoric-hotpatch # ?裤子(让(100年(ace))
清单6.22:PANDORIC-RECODE
(defmacro pandoric-recode (var盒新)? (with-pandoric(这个,@vars),盒(setq,新)))
(λ(n) (decf acc n)))) # <解释函数>果然,hotpatch通过:*(裤子3)97
所以现在我们的柜台关闭一个新值绑定到这个,它使用执行计算。然而,这样做hotpatch改变pandoric acc的值绑定?
*�(with-pandoric (acc) # ?裤子acc)
不。6,Acc仍然是以前的值,因为我们改变的唯一绑定pandoric环境这是我们改变到一个新的闭包为Acc的绑定。
宏pandoric-recode hotpatching需要一种稍微不同的方法。保存原代码的词法环境同时还管理改变时要执行的函数闭包调用外部编码和编译。听起来好得令人难以置信?记住acc的当前值是6在原始pandoric环境中,我们可以使用pandoric-recode安装一个新函数,利用这种原始值,噢,让?说,柜台的精神性一半提供n的值:
清单6.23:PLAMBDA
(defmacro plambda (largs pargs kr身体)(让(pargs (mapcar # ?列表pargs))) ?(让(自我)(setq(λ,largs @body)自我(dlambda (: pandoric-get(对称)�pandoriclet-get pargs)) (: pandoric-set(信谊val)�pandoriclet-set pargs)) (t(普克args)(应用这个args)))))))
* (pandoric-recode (acc) # ?裤子(λ(n) (decf acc (/ n 2))))
# <解释功能>
果然,我们有新的行为,acc的精神性的1/2(* 2),从6到5:
*�(pantest 2)
5和原始pandoric绑定相关联吗?
玿(with-pandoric (acc) # ?裤子acc)
是的。pandoric-recode是如何工作的呢?它关闭了λpandorically打开绑定的形式提供了原始的闭包。
宏观到目前为止我们使用创建pandoric pandoriclet闭包。Plambda是一个内外pandoriclet重写
增加了一些重要的特性。首先,plambda不再创建让环境通过pandoric使用访问器。相反,plambda带符号的列表引用变量预计将在调用者?年代词法环境。Plambda可以出口任何词汇环境变量,透明地让它们用于其他词法作用域访问吗?即使是编写和编译之前或之后plambda形式。
这是我们让增量改进/λ关闭系统旨在最大化双重语法。由于pandoric宏,最重要的是plambda withpandoric,我们可以轻松高效地超越词法作用域的边界在我们需要的时候出现。闭包是不再封闭;我们可以打开关闭容易重写我们的λ形式plambda形式。我们使用plambda出口词法变量和with-pandoric进口完全相同的局部变量。事实上这些新变量等价的,不是吗?即使是真正的新变量。一个更好的方式来思考pandoric变量,他们只是最初的词法作用域的扩展。作为一个简单的例子使用plambda,这里是一个pandoric反驳说,出口可能从两个不同的词汇环境变量:
* (setf (symbol-function ?裤子)(让((0))(让((b - 1)) (plambda (n) (b) (incf n) (setq b (* b n))))))
# <解释功能>
注意是多么容易出口这些词汇引用。做一个闭包pandoric一样容易添加一个pλ和添加一个列表之前的字符变量后出口λ参数。我们可以打开这个关闭?和任何pandoric关闭出口,a和b的符号吗?通过使用with-pandoric一样:
清单6.24:MAKE-STATS-COUNTER
(defun make-stats-counter(关键(数0)(0)和(平方和0))
(plambda (n)(金额数平方和)Cincf平方和(外贸n 2)) Cincf和n)
(incf计数)))
* (defun pantest-peek () (with-pandoric (b) # ?裤子(格式t“=”, b =“~ %”b)))
PANTEST-PEEK *(裤子? peek)
a=0, b=1 NIL
Plambda是通用的组件的一个例子宏扩展是很有帮助的。还记得我们写pandoriclet并决定移动情况下语句的创建getter函数pandoriclet-get和setter代码pandoriclet-get吗?Plambda利用这些相同的功能。即使这些宏拼接结果从这些功能相当不同的词汇上下文,因为宏写使用相同的变量命名约定和inter-closure协议,可重用的代码。
所以pandoric宏打破词法范围。他们允许你打开关闭时需要和代表美丽融合各种COMMON LISP语言的特点:逐字宏,宏普遍变量和象征。但他们是好,真的吗?
Pandoric宏很重要,因为它们给我们对象系统的主要优点更喜欢秘密地不需要我们离开自然let-lambda组合项目
清单6.25:DEFPAN
(defmacro defpan普克(名称args身体)* {(defun、名称(自我)如果args�? (with-pandoric, args自我�@body) ? (progn @body))))
明代风格。特别是,我们可以添加功能,或为闭包使用方法,无需池的实例已经创建的对象。
Make-stats-counter一plambdaλ/让我们创造了创建计数器,除了它保持三条信息。除了和,的平方和,物品的数量到目前为止也一直处理。如果我们使用了λ代替plambda makestats-counter的定义,大多数信息都是我们无法进入。我们将锁定,因为这些变量将被关闭。
我们如何编写pandoric方法?我们可以直接访问它的变量使用with-pandoric上面了,或者,由于这是lisp,设计一个更具体的接口。
defun Defpan结合和with-pandoric宏。Defpan吗?年代的主要目的是使一个对偶函数编写使用之间的syntar defun和外国使用with-pandoric词法作用域访问。虽然我们提供参数defpanλ中使用相同的语法形式?符号列表吗?的参数defpan意味着不同的东西。而不是创建一个新的词汇的环境,这些pandoric功能扩展的词汇环境pandoric关闭应用。defun和常规λ形式,名称(符号)你给一个变量不重要。pandoric功能,这就是一切。此外,与pandoric函数参数的顺序吗?物质和你可以选择使用尽可能少的或尽可能多的导出的词法变量。
Defpan还提供了一个照应语叫做自我,让我们
清单6.26:STATS-COUNTER-METHODS
(defpan stats-counter-mean(和计数)(/金额计算))(defpan stats-counter-variance(平方和和计数)Cif(<数2)0(/(-平方和(* sum (stats-counter-mean自我)))(-数- 1))))
(defpan stats-counter-stddev () (√stats-counter-variance自我)))执行有用的技术称为照应语链接。通过无形的价值之间的自我pandoric函数,我们可以保持这个照应语的值在函数调用链。与所有链接结构,确保你不?在一个无限循环。
提出了三种方法,可以用在我们的闭包创建make-stats-counter或任何其他pandoric关闭出口所需的变量名。Stats-counter-mean仅返回所有的平均价值的价值观传递给关闭。Stats-counter-variance计算这些值的方差遵循一个链接链和statscounter-stddev遵循另一个计算标准偏差。注意,整个产业链上的每一个环节都只需要把照应语自我引用完整的词法闭包的上下文。我们看到,个别pandoric功能只需要参考他们的实际使用的变量,这些变量可以在任何顺序称为我们的愿望。
所以plambda创建另一个照应语?自我。而照应语这指的是实际调用闭包,自我是指间接环境调用这个闭包。虽然这听起来有点奇怪,代码在我们plambda可以使用自我pandorically访问自己的词汇环境
清单6.27:MAKE-NOISY-STATS-COUNTER
(defun make-noisy-stats-counter(关键(数0)(0)和(平方和0))
(plambda (n)(金额数平方和)(incf平方和(外贸n 2)) Cincf和n)
Cincf数)(格式t”意味着= " ~ % VAR = " ~ % STDDEV = " a7 ~ %”(stats-counter-mean自我)(stats-counter-variance自我)(stats-counter-stddev自我)))),而不是直接访问它。这对于defpan到目前为止只好像有用方法,写我们的词法作用域内工作。
Make-noisy-stats-counter make-statscounter相同除了它使用自我照应语来调用我们defpan函数stats-counter-mean stats-countervariance, stats-counter-stddev。

* (let ((x 1)) (eval
(1 + x)))
错误:未绑定变量X。
有时延长你显然是可取的
清单6.28:PANDORIC-EVAL
(defvar pandoric-eval-tunnel) (defmacro pandoric-eval (var expr) ?(让((pandoric-eval-tunnel (plambda (), var t))) (eval ? (with-pandoric�?一样,var pandoric-eval-tunnel�expr))))词法环境eval。但是要小心。经常说,如果你正在使用eval你可能做错了什么。滥用eval可能导致较慢的项目因为eval可以是一个很昂贵的操作吗?主要是因为它需要扩大宏传递给它的形式出现。如果你突然发现需要eval编程时,问问你自己为什么你没有?t做任何你想做的很多。如果答案是你吗?t,说因为你只是阅读的形式,那么恭喜你,你已经找到了一个罕见的合法使用eval。其他答案将直接回到你可能首先应该做到:宏。
但是我们呢?年代说你真的想eval的东西,只要你能说服那个讨厌的词汇上下文。pandoric-eval宏使用plambda和withpandoric是一个有趣的例子。Pandoric-eval使用一个特殊的变量,我们叫pandoric-eval-tunnel pandoric eval函数闭包可以通过动态环境。我们选择哪些词法变量通过动态隧道环境通过提供一个列表的所有pandoric-eval符号作为第一个参数。这是应用于我们之前的例子:
* (let ((x 1)) (pandoric-eval (x)
(+ 1 x)))
和表达式计算pandoric-eval可以修改原始词汇环境;pandoric-eval双向隧道:
*(让((* 1))(pandoric-eval (x) ? Cincf x)) x)
这一节,虽然很长,但仍只触及表面pandoric宏怎么可能和他们的许多可能的变化。我期待着许多有趣的未来发展。
练习:pandoric-eval调用巢吗?也就是说,你可以使用pandoric-eval评估一种评估pandoric-eval ?为什么或为什么不呢?
练习:尽管pandoric宏的实现非常有效,它可以提高。?试着更换pandoriclet-get pandoriclet-set来生成代码,使用一个哈希表,而不是案件和这两个基准实现对小型和大量pandoric变量。调查你最喜欢秘密地实现,模仿有调度完成,re-benchmark。
