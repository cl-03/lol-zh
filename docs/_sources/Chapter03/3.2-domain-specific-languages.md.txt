# 3.2 领域特定语言

---

Author: Doug Hoyte <[doug@hoytech.com](mailto:doug@hoytech.com)>

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

COMMON LISP 与大多数其他编程环境一样，也有 **sleep** 函数 ，**sleep** 函数会让进程休眠 **n** 秒，其中 **n** 是一个非负数、非复杂的数字。 例如，想要休眠 3 分钟（180 秒的话），可以执行下面的语句：
```
(sleep 180)
```
或者，如果喜欢以分钟为单位进行休眠的话，可以改为：
```
(sleep (* 3 60))
```
因为编译器知道如何折叠常量，所以上面两个调用都能正常执行。 为了更明确地说明我们在做什么，可以定义个 **sleep-minutes** 函数:
```
(defun sleep-minutes (m)
  (sleep (* m 60)))
```
为想要使用的每个时间单位定义新函数既笨重又不方便。 我们需要的是某种抽象，可以指定时间单位和值。 我们真正需要的是一种特定领域的语言。

到目前为止，lisp 的解决方案与任何其他语言的解决方案相同：创建一个函数，该函数接受一个值和一个单位，并返回该值乘以与给定单位相关的某个常数。 但是当我们考虑代表这个单元的选项时，一个 lispy 改进变得很明显。 在像 C 这样的语言中，习惯上使用像 int 这样的底层数据类型并分配对应于不同单位的任意值：
```c
#define UNIT_SECONDS 1
#define UNIT_MINUTES 2
#define UNIT_HOURS 3

int sleep_units(int value, int unit) {
  switch(value) {
    case UNIT_SECONDS: return value;
    case UNIT_MINUTES: return value*60;
    case UNIT_HOURS: return value*3600;
  }
}
```
​
```
(defun sleep-units% (value unit)
  (sleep
    (* value
       (case unit
         ((s) 1)
         ((m) 60)
         ((h) 3600)
         ((d) 86400)
         ((ms) 1/1000)
         ((us) 1/1000000)))))
```
但在 lisp 中，最明显的方法就是使用符号来代表所需单元。 lisp 中的符号大部分与其他符号不相等。**Eq** 是最快的 lisp 比较运算符，大致对应于指针比较。 由于可以非常快速地比较指针，因此符号提供了一种非常快速和方便的方法来让两个或多个不同的 lisp 表达式知道指向同一个值。 在 lisp 中，可以定义 **sleep-units%** 函数，这样就能指定单位：
```
(sleep-units% 2 'm)
(sleep-units% 500 'us)
```
因为比较符号只需要一个指针比较，**sleep-units%** 会编译成一个很快的运行时调度：
```
...
524:       CMP     ESI, [#x586FC4D0]    ; 'S
52A:       JEQ     L11
530:       CMP     ESI, [#x586FC4D4]    ; 'M
536:       JEQ     L10
538:       CMP     ESI, [#x586FC4D8]    ; 'H
53E:       JEQ     L9
540:       CMP     ESI, [#x586FC4DC]    ; 'D
546:       JEQ     L8
...
```
注意 **sleep-units%** 参数中的 uint 必须要引用。 因为当 lisp 执行函数时，它首先执行计算所有参数，然后将结果绑定到变量后再在函数内部使用。 数字和字符串以及其他原语会自动执行计算，这就是为什么不需要引用赋予 **sleep-units%** 的数值的原因。 但请注意，它们已被计算，因此只要愿意的话，都可以进行引用：
```
(sleep-units% '.5 'h)
```
然而，符号通常不会对自己进行计算[1](https://letoverlambda.com/index.cl/guest/chap3.html#)。当 lisp 计算执行符号时，会假定正在引用一个变量并尝试在给定的词法上下文的情况下查找与该变量关联的值（除非该变量被声明为特殊的，在这种情况下是动态环境）。
```
(defmacro sleep-units (value unit)
  `(sleep
     (* ,value
        ,(case unit
           ((s) 1)
           ((m) 60)
           ((h) 3600)
           ((d) 86400)
           ((ms) 1/1000)
           ((us) 1/1000000)))))
```
为了避免引用单位，我们需要一个宏。 与函数不同，宏不计算其参数。 利用这一事实，我们将  **sleep-units%** 函数换成 **sleep-units** 宏。 现在就不需要引用单位：
```
(sleep-units .5 h)
```
虽然这个宏的主要目的是避免引用 **unit** 参数，但这个宏甚至比函数更高效，因为根本没有运行时调度：单位和乘数在编译时是已知的。 当然，每当发现这种好得令人难以置信的情况时，它可能真的好得令人难以置信。 这种效率提升并不是免费的。 通过前面的运行时调度，我们失去了在运行时确定时间单位的能力。 这让这个宏无法执行以下代码：
```
(sleep-units 1 (if super-slow-mode 'd 'h))
```
上面这段代码将无法执行，因为 **sleep-units** 第二个参数要是 case 语句中的符号，而是上面代码中是个列表，其中第一个元素是符号 **if**。
```
(defmacro unit-of-time (value unit)
  `(* ,value
      ,(case unit
         ((s) 1)
         ((m) 60)
         ((h) 3600)
         ((d) 86400)
         ((ms) 1/1000)
         ((us) 1/1000000))))
```
回想一下，大多数宏都是为了创建更方便和有用的编程抽象而编写的，而不是为了提高底层代码的效率。 是否可以从这段代码中提取任何习语，使其对程序的其余部分（以及可能的其他未来程序）更有用？ 即使是现在，我们也可以预见想要用时间值做其他事情，而不仅仅是调用它们休眠。 时间单位宏从 **sleep-units** 宏中抽象出功能，返回一个值而不是对其调用 **sleep**。**value** 参数可以在运行时确定，因为它会被计算，但 **unit** 不能，因为在编译时需要这个信息，就像 **sleep-units** 一样。 以下是示例：
```
* (unit-of-time 1 d)

86400
```
像 **unit-of-time** 这样简单的宏为解决特定领域的问题提供了更好的语法，并且可以带来显著的生产力和正确性优势。 我们将在[第 5.2 节：自上而下编程](../Chapter05/5.2-top-down-programming.md) 中继续开发这种单元语言。 与大多数编程语言不同，lisp 为创建编程环境的人提供了相同的工具。 宏足以实现 COMMON LISP 语言，也足以实现领域特定语言。
