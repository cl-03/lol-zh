# 2.7 Let Over Lambda Over Let Over Lambda

---

Author: Doug Hoyte <[doug@hoytech.com](mailto:doug@hoytech.com)>

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

Users of object systems store values they want shared between all objects of a certain class into so-called _class variables_ or _static variables_[8](https://letoverlambda.com/index.cl/guest/chap2.html#). In lisp, this concept of sharing state between closures is handled by environments in the same way that closures themselves store state. Since an environment is accessible indefinitely, as long as it is still possible to reference it, we are guaranteed that it will be available as long as is needed.


If we want to maintain a global direction for all counters, **up** to increment each closure's counter and **down** to decrement, then we might want to use a let over lambda over let over lambda pattern:
In the above example, we have extended **counter-class** from the previous section. Now calling closures created with **counter-class** will either increment its counter binding or decrement it, depending on the value of the direction binding which is shared between all counters. Notice that we also take advantage of another **lambda** inside the direction environment by creating a function called **toggle-counter-direction** which changes the current direction for all counters.


While this combination of **let** and **lambda** is so useful that other languages have adopted it in the form of class or static variables, there exist other combinations of **let** and **lambda** that allow you to structure code and state in ways that don't have direct analogs in object systems[9](https://letoverlambda.com/index.cl/guest/chap2.html#). Object systems are a formalisation of a subset of let and lambda combinations, sometimes with gimmicks like _inheritance_ bolted on[10](https://letoverlambda.com/index.cl/guest/chap2.html#). Because of this, lisp programmers often don't think in terms of classes and objects. Let and lambda are fundamental; objects and classes are derivatives. As Steele says, the "object" need not be a primitive notion in programming languages. Once assignable value cells and good old lambda expressions are available, object systems are, at best, occasionally useful abstractions and, at worst, special-case and redundant.
