# 3.5 异常捕获

---

Author: Doug Hoyte <[doug@hoytech.com](mailto:doug@hoytech.com)>

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

关于变量捕获有两种观点。 变量捕获是一些无法预测的错误的根源，但如果使用得当，它也也可以是个很理想的宏功能。 让我们从 Graham 在 On Lisp 中定义的一个简单宏开始考虑变量捕获：**nif**。 **Nif** 是个 *数字 if* ，它有四个必要子句，而常规的布尔值 **if** 有两个必要子句和一个可选的子句。 **Nif**，或者更确切地说是 **nif** 展开的代码，计算第一个子句并假设结果是一个非复数。 然后，它根据结果是正数（**plusp**）、零（**zerop**）还是负数（其他情况）来计算三个相应子句之一。 我们可以用 **nif** 测试变量 **x** ，如下所示：
```
(nif x "positive" "zero" "negative")
```
**Nif** 是讨论变量捕获的理想函数，我们将使用它来说明几个关键点，并作为宏构造新符号的测试用例。 在展示 Graham 定义的 **nif** 版本之前，先自己定义个几乎正确但有一点问题的版本：
```
(defmacro nif-buggy (expr pos zero neg)
  `(let ((obscure-name ,expr))
     (cond ((plusp obscure-name) ,pos)
           ((zerop obscure-name) ,zero)
           (t ,neg))))
```
**Nif-buggy** 展开成一段代码，用 **let** 绑定计算用户传入的 **expr** 结构的结果。 我们需要这样做，因为计算 **expr** 可能会产生副作用，我们需要将它的值用于两件不同的语句：将其传给 **plusp** 和 **zerop**。 但是这个临时绑定叫什么呢？ 为了引入一个细微的错误，我们选择使用 **obscure-name**。 除非有人看宏展开，否则没人会看到这个变量名，所以没什么大不了的，对吧？

几乎所有情况下，**Nif-buggy** 都会像 **nif** 一样工作。 只要 **nif-buggy**9 的参数中没有用到符号 **obscure-name**，就不可能有异常捕获变量。 但如果 **obscure-name** 确实出现在参数中会发生什么呢？ 在多数情况下，仍然没有错误：
```
(nif-buggy
  x
  (let ((obscure-name 'pos))
    obscure-name)
  'zero
  'neg)
```
即使 **x** 输出的结果是正数，即使将禁止符号注入到 **nif-buggy** 的宏展开中，这段代码仍然可以按预期工作。 当一个新的绑定被创建，并且该绑定内的引用总是引用创建的绑定时，不会发生异常变量捕获。 只有在对 **obscure-name** 的使用超出了其展开中的使用时，才会出现问题。 这是异常变量捕获的示例：
```
(let ((obscure-name 'pos))
  (nif-buggy
    x
    obscure-name
    'zero
    'neg))
```
在这种情况下，**obscure-name** 将绑定到 **x** 的计算结果中，因此符号 **pos** 不会返回预期结果。 这是因为我们对符号的使用跨越了对绑定的无形使用。 有时，像这样具有不可见绑定的代码被称为不具有引用透明性。

但这不就是一个学术问题吗？ 当然，我们可以想出足够稀有的名字，这样问题就永远不会出现。 是的，在很多情况下，包（packages）和智能变量（smart variable）命名可以解决变量捕获的问题。 但是，多数严重的变量捕获错误不会出现在程序员直接创建的代码中。 大多数变量捕获问题只有在其他宏以未预料到的方式调用宏（与你的宏结合）时才会出现。 Paul Graham's 对为什么要防止异常变量捕获有个直接的答案：

> Why write programs with small bugs when you could write programs with no bugs?

我认为可以进一步提炼这个问题：无论错误有多么微小，在有正确的方法时，为什么要用这种有问题的方法呢？

幸运的是，事实证明，变量捕获，就这个问题而言，是个有简单方案的已解决的问题。最后一句话对许多人来说是一个有争议的陈述，尤其是那些不喜欢明显的解决方案而花费大量时间寻找更好解决方案的人。作为专业的宏程序员，你将接触到许多这些变量捕获解决方案。当前主流的方法是用所谓的 **卫生宏（hygienic macro)**。这些解决方案试图限制或消除异常变量捕获的影响，但不幸的是，这样做是以牺牲需要的、理想的变量捕获为代价。几乎所有用于减少变量捕获影响的方法都只是为了减少使用 **defmacro** 执行的操作。在最好的情况下，卫生宏是初学者的安全护栏；在最坏的情况下，会变成电栅栏，将受害者困在一个经过消毒的、安全的监狱中。此外，最近的研究表明，各种方案修订版指定的卫生宏系统仍然容易受到许多有趣的捕获问题的影响[SYNTAX-RULES-INSANE][SYNTAX-RULES-UNHYGIENIC]。

变量捕获的真正解决方法称为生成符号，或简称 gensym。 gensym 是种让 lisp 选择变量名称的方法。但是，lisp 不会像之前那样用 **obscure-name** 这样的蹩脚的名字，而是用个好名字。真正的好名字。这些名字是如此的好和独特，以至于任何人（甚至 gensym 本身）都不会再选择相同的名字。这怎么可能？在 COMMON LISP 中，符号（名称）与包（package）相关联。包是符号的集合，可以用字符串、符号名称字符串从中获取指向的指针。这些指针（通常只称为符号）最重要的属性是它们将与在该包中以相同符号名称查找的所有其他指针（符号）相等。 gensym 是在任何包中都不存在的符号，因此没有符号名称会返回一个与 gensym 相等的符号指针。 Gensyms 用在想向 lisp 指示某个符号应该与表达式中的某个其他符号相等而无需命名任何内容时。因为没有命名任何东西，所以不会发生名称冲突。

因此，通过遵循这三个简单但很重要的规则，可就能简单地避免在 COMMON LISP 中捕获异常变量：

> Whenever you wrap a lexical or dynamic binding around code provided to your macro, name this binding with a gensym unless you want to capture it from the code you are wrapping.

每当在宏代码的周围封装函数绑定、**macrolet** 或 **symbol-macrolet** 宏时，请使用 gensym 命名此函数或宏，除非你想从封装的代码中捕获它。 确认此绑定与标准定义的任何特殊结构、宏或函数没有冲突。

> Never assign or re-bind a special form, macro, or function specified by COMMON LISP.

除了 COMMON LISP 之外的一些 lisp，如 Scheme，具有将变量命名空间与函数/宏命名空间结合起来的糟糕特性。 有时这些 lisp 被称为 *lisp-1* lisp，而具有独立名称空间的 COMMON LISP 被称为 *lisp-2* lisp。 使用假设的 *lisp-1* COMMON LISP，在构造宏时还必须遵循以下两个附加规则：

* 确认有意引入的词法或动态绑定不会与有意引入的函数或宏绑定或标准定义的任何特殊结构、宏或函数发生冲突。

* 确认有意引入的函数或宏绑定不会与有意引入的词法或动态绑定发生冲突。

COMMON LISP 将变量命名空间与函数命名空间分开的明智设计决定消除了整个维度的异常变量捕获问题。 当然 *lisp-1* lisp 在创建宏时不会遇到任何理论上的障碍：如果我们遵循前面的两条规则，我们可以像在 COMMON LISP 中一样避免变量捕获。 但是，在编写复杂的宏时，要在单个隔离的命名空间中跟踪符号可能已经够难的了。 考虑名称的交叉引用只会使宏编写比设想的更困难。

除了不完整的标准之外，比任何其他属性更重要的是，单一命名空间的这种缺陷使得 Scheme 这种原本优秀的语言不适合正经的宏构造。 Richard Gabriel 和 Kent Pitman 用以下令人难忘的引述[LISP2-4LIFE] 总结了这个问题：

> There are two ways to look at the arguments regarding macros and namespaces. The first is that a single namespace is of fundamental importance, and therefore macros are problematic. The second is that macros are fundamental, and therefore a single namespace is problematic.

因为命名空间的数量再怎么重要，也没有比启用宏更重要，所以只能得出结论，Scheme 做出了错误的决定，而 COMMON LISP 做出了正确的决定。

尽管如此，每次需要一个无名符号时都调用 **gensym** 既笨重又不方便。 难怪 Scheme  设计者决定使用所谓的卫生宏系统，以避免在所有地方输入 **gensym**。 Scheme 采取的错误转变是为了宏构造这一目的而推广一种特定于领域的语言。 虽然 Scheme 的迷你语言毫无疑问很强大，但忽略了宏的全部要点：宏很棒，因为它们是用 lisp 编写的，而不是一些愚蠢的预处理器语言。

这本书介绍了一种新的 gensyms 语法，更适合那些有简洁意识的人，但仍然是传统 lisp 表达式的薄膜。 我们的新符号 gensyms 将用作本书中大多数宏的基础，通过剥开使用我们符号提供的功能的简单宏来清楚的描述这一语法。 继续上一节中的 **nif** 示例。 以下是 Graham 定义的捕获安全的 **nif**：
```
(defmacro nif (expr pos zero neg)
  (let ((g (gensym)))
    `(let ((,g ,expr))
       (cond ((plusp ,g) ,pos)
             ((zerop ,g) ,zero)
             (t ,neg)))))
```
这是 **gensym** 的正确用法。 正如上一节中看到的，可以将用户输入展开为可能干扰其变量之一的宏必须注意变量捕获。 Graham 提出了一个缩写宏 **with-gensyms**，在需要创建多个 **gensyms** 的情况下更加简洁：
```
(with-gensyms (a b c)
  ...)
```
展开成
```
(let ((a (gensym))
      (b (gensym))
      (c (gensym)))
  ...)
```
因为在 **defmacro** 结构中需要 **gensym** 非常普遍，我们决定进一步改写缩写。 特别要注意的是，我们必须为每个 **gensym**（如 **a**、**b** 和 **c**）输入至少两次的临时名称：一次是声明它为 **gensym**，另一次是调用它时。 那么可以消除这种冗余吗？

首先，想想 **nif** 宏如何使用 **gensyms**。 当 **nif** 宏展开时，会调用 **gensym** 返回一个生成的符号。 因为这个符号保证是唯一的，所以可以安全地将它拼接到一个宏展开中，因为这个符号知道它永远不会捕获意外引用。 但是仍需要在宏的定义中命名这个 **gensym**，以便能够将它拼接到正确位置的展开中。 对于 **nif** 宏定义的范围，Graham 将这个 **gensym** 命名为 **g**。 注意，此名称实际上从未出现在 **nif** 的宏展开中：
```
* (macroexpand '(nif x 'pos 'zero 'neg))

(LET ((#:G1605 X))
  (COND ((PLUSP #:G1605) 'POS)
        ((ZEROP #:G1605) 'ZERO)
        (T 'NEG)))
T
```
变量名 **g** 在宏展开中消失了。因为 **g** 只绑定在展开环境中，所以给这样一个变量的名称与展开中的捕获无关。在展开中，所有出现的 **g** 都被替换为打印名称为 **G1605** 的符号。以 **#:** 为前缀，因为该符号未在任何包中进行驻留——它是一个 gensym。打印结构时，有必要以这种方式为 gensyms 添加前缀，因为如果在再次读回该结构后使用（计算）该结构，我们希望 lisp 会中断。希望 lisp 中断，是因为我们无法通过查看两个 gensym 的打印名称来确定它们是否相等——这就是它们的目的。 Lisp 以一种有趣的方式中断：因为每次读取 **#:** 符号时都会创建一个新符号，并且因为 **(eq '#:a '#:a)** 永远不为真，所以上述展开中的内部 **#:G1605** 符号不会引用 let 结构创建的绑定，所以 lisp 认为表达式有一个自由变量，向我们表明一个带有 gensyms 的结构被再次读入。

尽管此类非内部符号的默认打印行为，仍然可以保存和重新加载宏展开。 为了更准确地打印带有 gensyms 的结构，可以在打印结果时打开 *print-circle* 模式：
```
* (let ((*print-circle* t))
    (print
      (macroexpand '(nif x 'pos 'zero 'neg)))
    t)

(LET ((#1=#:G1606 X))
  (COND ((PLUSP #1#) 'POS)
        ((ZEROP #1#) 'ZERO)
        (T 'NEG)))
T
```
在上面的代码中，lisp 输出使用 **#=** 和 **##** 读取宏。 这些读取宏可以让我们创建自引用结构，这将在[4.5 节：循环表达式](../Chapter04/4.5-cyclic-expressions.md)中深入地讨论。 如果我们阅读上面的代码，里面使用的符号实际上与 **let** 绑定中使用的符号相同，展开仍然有效。 似乎上述定义避免了双重命名冗余。 有没有办法可以让其使用一个宏编写宏模板？
```
(defun g!-symbol-p (s)
  (and (symbolp s)
       (> (length (symbol-name s)) 2)
       (string= (symbol-name s)
                "G!"
                :start1 0
                :end1 2)))
```
记住，我们可以在宏定义中给 gensyms 任意的名字，甚至像 Graham 所做的那样，像 **g** 这样的简单名称，它们将在宏展开中消失。 由于命名自由，让我们对 gensyms 的命名约定进行标准化。 作为简洁性和唯一性之间的折衷，任何以两个字符 G! 开头且后面跟至少一个其他字符的符号都被认为是一种特殊的 gensym 引用符号，称为 G-bang 符号。 我们定义了一个谓词 **g!-symbol-p**，一个用于确定给定原子是否是 G-bang 符号的谓词。
```
(defmacro defmacro/g! (name args &rest body)
  (let ((syms (remove-duplicates
                (remove-if-not #'g!-symbol-p
                               (flatten body)))))
    `(defmacro ,name ,args
       (let ,(mapcar
               (lambda (s)
                 `(,s (gensym ,(subseq
                                 (symbol-name s)
                                 2))))
               syms)
         ,@body))))
```
现在我们已经标准化 G-bang 符号，可以创建一个宏来编写宏的定义并利宏编写叫做自动 gensyms 的快捷方式。 宏 **defmacro/g!** 为宏编写领域定义了一种特定于领域的语言，但保留了 lisp 的所有功能。 **defmacro/g!** 很简单，但是如何使用它以及它是如何工作的，并不是那么简单。 正因为如此，且因为这是本书中介绍的第一个真正的宏之一，我们慢慢地对 **defmacro/g!** 进行了分析。

剖析宏时，第一步就是是停止。 不要将宏视为语法转换或任何其他此类无意义的抽象。 把宏想象成一个函数。 宏本质是函数，并且以完全相同的方式工作。 该函数被赋予作为参数提供给它的未计算表达式，并期望返回代码以供 lisp 插入到其他表达式中。

所以，将 **defmacro/g!** 看作一个函数，考虑它的执行。因为我们正在编写一个常规的 lisp 函数，所以可以访问 lisp 的所有功能，甚至是之后添加到该语言中的实用程序。在 **defmacro/g!** 中，我们使用 Graham 的 **flatten** 实用程序、lisp 的 **remove-if-not** 和 **remove-duplicates** 函数以及 G-bang 符号谓词 **g!-symbol-p** 创建一个列表，该列表是由 **body**参数中所有的 G-bang 组成。接下来，使用反引号模板返回一个列表，该列表代表期望宏展开成的代码。在示例中，因为我们正在编写对 **defmacro** 的改进，我们希望我们的代码能够展开为 **defmacro** 结构本身。但是我们正在为 **defmacro** 语言添加新的便利功能，并希望创建一个稍微复杂的展开。为了给宏主体中找到的每个 G-bang 符号一个新的 **gensym**，我们用 **mapcar** 将一个函数应用到 G-bang 符号列表上，创建一个可以拼接到 **let** 结构的新列表，建立每个 **gensym** 的绑定。

注意，映射的 lambda 如何包含使用反引号运算符创建的表达式，从而导致看似（但不是）嵌套反引号的情况。 因为应用这个函数的 **mapcar** 是不带引号的，所以嵌套反引号中的不带引号的表达式仍然在我们原来的上下文中求值。 众所周知，嵌套反引号很难理解，在[第 4 章：阅读宏](../Chapter04/index.rst)中深入地研究反引号时，我们将回到这个概念。

那么，**defmacro/g!**  到底可以让我们做什么？ 我们可以利用这种自动生成符号技术，一种检查宏的参数的词法范围内特定符号是否存在的方法。 如果我们不使用任何 G-bang 符号，使用 **defmacro/g!** 和 **defmacro** 完全一样。 但对出现在宏展开式主体中的任何 G-bang 符号都被解释为：

> 我希望在这个表达式周围绑定一个 gensym，我已经给出了这个符号。 实现它。

可以用 **defmacro/g!**在重新定义 **nif** 时避免显式创建 **gensym**：
```
(defmacro/g! nif (expr pos zero neg)
  `(let ((,g!result ,expr))
     (cond ((plusp ,g!result) ,pos)
           ((zerop ,g!result) ,zero)
            (t ,neg))))
```
当需要 **gensym** 时，直接就使用它。 当然，我们需要小心，所有对 G-bang 符号的引用仅由宏展开计算，因为这是 **gensym** 将被绑定的唯一位置。 像上面那样取消引用出现在反引号内的 G-bang 符号是最明显的方法，可以看到这与 Graham 的 **nif** 原始定义中符号 **g** 的取消引用直接平行。

现在，我们定义了宏 **nif**，其的功能与 Graham 的相同，但这种改进似乎好得令人难以置信。 它真的有效吗？ 在做出决定之前，看一下宏展开：
```
* (macroexpand-1
    '(defmacro/g! nif (expr pos zero neg)
       `(let ((,g!result ,expr))
          (cond ((plusp ,g!result) ,pos)
                ((zerop ,g!result) ,zero)
                (t ,neg)))))

(DEFMACRO NIF (EXPR POS ZERO NEG)
  (LET ((G!RESULT (GENSYM "RESULT")))
    `(LET ((,G!RESULT ,EXPR))
       (COND ((PLUSP ,G!RESULT) ,POS)
             ((ZEROP ,G!RESULT) ,ZERO)
             (T ,NEG)))))
T
```
但因为 **defmacro/g!** 本身也是个宏，宏展开环境中是否可能存在异常捕获或替换问题？ 与复杂的抽象一样，行为在一定程度上是任意的。 在同样的意义上，变量捕获本身就是一个缺陷，**defmacro/g!** 的某些属性可能看起来是缺陷，可能只是其设计固有的。 与往常一样，最好的解决方案是完全理解抽象。

但因为 **defmacro/g!** 本身也是个宏，宏展开环境中是否可能存在异常捕获或替换问题？ 与复杂的抽象一样，行为在一定程度上是任意的。 在同样的意义上，变量捕获本身就是一个缺陷，**defmacro/g!** 的某些属性可能看起来是缺陷，可能只是其设计固有的。 与往常一样，最好的解决方案是完全理解抽象。

**defmacro/g!** 的一个有趣的极端案例是在 G-bang 宏中定义 G-bang 宏。 **defmacro/g!** 所做的是将一组绑定引入展开环境，如果需要，每个绑定都绑定到宏可以使用的 **gensym**。 在有多种可能绑定 gensym 的情况下，因为有上下文，它们总是可以区分的。 换句话说，始终可以根据处在的环境中计算它来指定应该使用哪个环境的 **gensym**。看下以下一个认为制造的示例：
```
(defmacro/g! junk-outer ()
  `(defmacro/g! junk-inner ()
     `(let ((,g!abc))
        ,g!abc)))
```
这里创建了两个 gensyms。 **g!abc** 的用法前面只有一个非引号（逗号），因此我们知道展开是指由 **junk-inner** 展开创建的内部 **gensym**。 如果每个都有两个非引号，它们将引用由 **junk-outer** 展开创建的外部 **gensym**。

**defmacro/g!** 用了 Graham 的 **flatten** 函数。 **Flatten**，如第 1.3 节所述，Lisp 实用程序，接收一个 cons 树结构——我们的 lisp 代码——并返回所有叶子/原子的新列表。 **defmacro/g!**中 **flatten**的使用是代码遍历的一个简单示例，我们之后将在本书中重新讨论遍历代码这一主题。

练习：在上面定义 G-bang 宏的 G-bang 宏中，如果第一个 gensym 前面有一个反引号（逗号），而另一个前面有两个反引号（两个逗号），会出现什么问题？
