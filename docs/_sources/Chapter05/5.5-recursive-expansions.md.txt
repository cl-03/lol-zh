# 5.5 递归展开

---

Author: Doug Hoyte

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---



在用例子教初学者 lisp 时，在课程中不可避免地会出现一个问题
> cadr 是个什么玩意?

这时有两种方法来回答这个问题。第一种方法就是向学生解释 lisp 的列表（list）是由 `cons`
单元组成，每个 `cons` 单元都有两个指针：`car` 和 `cdr`。一旦理解了这个概念，就很容易
展示如何将这些指针的访问器函数（也称为 `car` 和 `cdr`），这两个函数可以组合成 `cadr`
函数，而 `cadr` 函数会遍历列表然后获取列表中的第二个元素。


第二种方法就是给学生引入 `second` 这个 COMMON LISP 函数，然后完全忽略 `cadr`。而
`cadr` 和 `second` 效果是一样的：获取列表中的第二个元素。不同之处在于 `second` 是根
据它的结果来命名的，而 `cadr` 是根据它的过程来命名的。`cadr` 是显式的定义，而
`second` 是个容易记住的函数名，但它不合需要地模糊了操作的含义。 显式定义通常更好，
因为我们能想到的 `cadr` 函数不仅仅是获取列表的第二个元素。 例如，我们明显可以用
`cadr` 作为获取 `lambda` 结构参数解构列表的概念。 `cadr` 和 `second` 在底层执行上是
一样的，但在概念上可以表示不同的操作。
> `second` 和 `cadr` 是完全一样的，都只能应用到列表上，不能应用到其他的序列类型上，
> 如向量、字符串之类的，即这两个函数的参数类型只能是列表。

对显示定义来说，比哲学偏好更重要的是，`car` 和 `cdr` 的组合可以表示更多的列表访问操作，
而且比英文词组的访问器更一致。`car` 和 `cdr` 用处很大，因为可以把他们组合成新的、任意
的函数。例如，`(cadadr x)` 和 `(car (cdr (car (cdr x))))` 是一样的。COMMON
LISP 要求必须定义长度不大于 4 的 `car` 和 `cdr` 的所有组合。 因此，尽管没有函数
`second-of-second` 用于获取列表的第二个元素，然后将其作为列表并获取其第二个元素，
但可以使用 `cadadr` 达到这个效果。


这些预定义的 `car` 和 `cdr` 的组合用在函数的 `:key` 访问参数上真的很方便，像 `find` ：
```
* (find 'a
    '(((a b) (c d)) ((c d) (b a)))
    :key #'cadadr)

((C D) (B A))
```
使用预定义的 `cadadr` 访问器比构建个等价的英文访问器组合的 lambda 表达式要更精确。
```
* (find 'a
    '(((a b) (c d)) ((c d) (b a)))
    :key (lambda (e)
           (second (second e))))

((C D) (B A))
```
COMMON LISP 也提供了函数 `nth` 和 `nthcdr`，他们可以用作通用访问器，比如说，
在不能确切地知道编译时想要获取哪个元素。`nth` 的定义很简单：从列表中取出 n 个 `cdrs`，
然后取一个 car。 所以 `(nth 2 list)` 与 `(caddr list)`、`(third list)` 是一样的。
`nthcdr` 也一样，只是它不做最后的 car：`(nthcdr 2 list)` 和 `(cddr list)` 是一样的。


但是，如果 `cons` 结构中的位置不能通过上述模式之一（如 `nth` 或 `nthcdr`）访问，就需要
组合访问器。不得不组合不一致的抽象来完成任务通常表明不完整。 能否为访问列表的域定义
一种域特定语言，以便将这些 `car` 和 `cdr` 组合函数、英语访问器以及像 `nth` 和 `nthcdr`
这样的函数结合起来？


既然 `car` 和 `cdr` 是基础操作符，我们的语言应该有完全通用的方式组合这两个访问器。因为
有无数种这样的组合，为每个可能的访问器定义函数来继续组合显然是不可行的。 我们真正想要
的是一个可以扩展为高效列表遍历代码的宏。
```
(defmacro cxr% (x tree)
  (if (null x)
    tree
    `(,(cond
          ((eq 'a (cadr x)) 'car)
          ((eq 'd (cadr x)) 'cdr)
          (t (error "Non A/D symbol")))
      ,(if (= 1 (car x))
         `(cxr% ,(cddr x) ,tree)
         `(cxr% ,(cons (- (car x) 1) (cdr x))
                ,tree)))))
```
以 C 开头，后面跟着一个或多个 A 或 D 字符，以 R 结尾，指定列表访问器函数的语法非常直观，
这大致就是我们想要为我们的语言复制的内容。宏 `cxr%` 是这些访问器的双关语，其中一个或多个
 A 或 D 字符被替换为 X。 在 `cxr%` 中，第一个参数是个列表，列表中指定这些了 A 和 D。这个
列表是数字和符号 A 或 D 的交替组合。


例如，即使 COMMON LISP 没有提供个英文单词的函数来访问列表的第十一个元素，我们也可以
简单地定义出来：
```
(defun eleventh (x)
  (cxr% (1 a 10 d) x))
```
本节的重点是说明递归展开的实际用途。当宏将一个结构展开为一个新的结构时，递归展开就会出现，
该结构也包含所讨论的宏的使用。 与所有递归一样，此过程必须有个基本的终止条件。宏最终会展开
为不包含使用相关宏的结构，然后这个展开就会结束。


下面我们将 `cxr%` 宏的实例宏展开（`macroexpand`）成一个同样使用 `cxr%` 的结构：
```
* (macroexpand
    '(cxr% (1 a 2 d) some-list))

(CAR (CXR% (2 D) SOME-LIST))
T
```
当我们拷贝这个新的递归结构，然后宏展开它，又会得到一个递归：
```
* (macroexpand
    '(CXR% (2 D) SOME-LIST))

(CDR (CXR% (1 D) SOME-LIST))
T
```
下面这个递归的结果展示了 `xcr%` 另一种可能的用法：空列表访问器：
```
* (macroexpnad
    '(CXR% (1 D) SOME-LIST))

(CDR (CXR% NIL SOME-LIST))
T
```
空列表访问器就是基本终止条件，然后直接展开被访问的列表：
```
* (macroexpand
    '(CXR% NIL SOME-LIST))

SOME-LIST
T
```
用 CMUCL 的拓展 `macroexpand-all` （一个完成的代码遍历器组件），可以看到
`cxr%` 结构的完整展开：
```
* (walker:macroexpand-all
    '(cxr% (1 a 2 d) some-list))
(CAR (CDR (CDR SOME-LIST)))
```
多亏了我们出色的 lisp 编译器，就意图和目的而言，`cxr%` 的使用和 `caddr` 与 `third` 一样。


但是，根据命名来看，`cxr%` 还不完善。这只是最终版 `cxr` 的初版。这个版本的第一个问题
就是 A 和 D 的数量只能是整型。因为这个限制，有些 `nth` 和 `nthcdr` 能做的事情我们的宏
却做不到。


我们需要检查将非整数作为 A 或 D 符号的数字前缀的情况。 在这种情况下，我们的代码展开应该
计算所提供的内容，并将此值用作要遍历的 `cars` 或 `cdrs` 的数量。


`cxr%` 的第二个问题是，当 A 和 D 的前面的数字特别大时，`cxr%` 会内联所有的 `car` 和 `cdr`
的组合。对小的数字来说，内联可以提高性能，但通常内联过多的 `car` 和 `cdr` 没有意义； 相反，
应该用像 `nth` 或 `nthcdr` 这样的循环函数。


为了解决这两个问题，我们添加了个替代展开。如果 A 或 D 前面的参数不是整型的话，就会调用
新的操作，而且，如果我们不想内联大量的 `car` 或 `cdr`，也可以选择调用新的操作。任选内联
阈值为 10，这个新的操作由 `cxr` 宏提供。
```
(defvar cxr-inline-thresh 10)

(defmacro! cxr (x tree)
  (if (null x)
    tree
    (let ((op (cond
                ((eq 'a (cadr x)) 'car)
                ((eq 'd (cadr x)) 'cdr)
                (t (error "Non A/D symbol")))))
      (if (and (integerp (car x))
               (<= 1 (car x) cxr-inline-thresh))
        (if (= 1 (car x))
          `(,op (cxr ,(cddr x) ,tree))
          `(,op (cxr ,(cons (- (car x) 1) (cdr x))
                     ,tree)))
        `(nlet-tail
          ,g!name ((,g!count ,(car x))
                   (,g!val (cxr ,(cddr x) ,tree)))
          (if (>= 0 ,g!count)
            ,g!val
            ;; Will be a tail:
            (,g!name (- ,g!count 1)
                     (,op ,g!val))))))))
```
使用 `cxr`，我们可以直接根据 `car` 和 `cdr` 的显示指定来设计 `nthcdr`：
```
(defun nthcdr% (n list)
  (cxr (n d) list))
```
同样的，`nth`：
```
(defun nth% (n list)
  (cxr (1 a n d) list))
```
因为编写宏是个迭代的、分层次的过程，我们经常驱使自己使用组合或结合之前实现的宏。
例如，在 `cxr` 的定义中，替代展开用到了上一节中定义的宏：`nlet-tail`。
`nlet-tail` 很方便，因为它可以给迭代构造命名，同时，因为我们只计划将迭代作为
尾调用，就能保证使用它而避免不必要的堆栈消耗。


下面是 `xcr` 在 `nthcdr%` 中的展开：
```
* (macroexpand
  '(cxr (n d) list))
(LET ()
  (NLET-TAIL #:NAME1632
            ((#:COUNT1633 N)
              (#:VAL1634 (CXR NIL LIST)))
    (IF (>= 0 #:COUNT1633)
      #:VAL1634
      (#:NAME1632 (- #:COUNT1633 1)
T
```
注意，复杂的宏展开的代码通常是程序员从不会去写的。特别要注意 `nil cxrs` 的使用
和无意义 `let` 的使用，这两者都留给了进一步的宏展开和编译器来优化。


因为宏可以让用户看到更多的展开，所以显示定义在其他语言中是不可能实现的。例如，
根据 `cxr` 的设计，当 A 和 D 前面的整数小于 `cxr-inline-thresh` 的参数时，
`car` 和 `cdr` 的调用会被内联：
```
* (macroexpand '(cxr (9 d) list))
(LET ()
  (CDR (CXR (8 D) LIST)))
T
```
但多亏了 `cxr` 的显示定义，我们可以传递一个值，尽管它本身不是整数，但在计算时将
成为整数。当我们这么做时，我们知道不会有内联，因为这个宏会变成 `nlet-tail` 展开。
计算一个整数最简单的结构就是将那个整数引起来：
```
* (macroexpand '(cxr ('9 d) list))
(LET ()
  (NLET-TAIL #:NAME1638
            ((#:COUNT1639 '9)
              (#:VAL1640 (CXR NIL LIST)))
    (IF (>= 0 #:COUNT1639)
      #:VAL1640
      (#:NAME1638 (- #:COUNT1639 1)
T
```


通常我们会发现将宏组合起来很有用：`cxr` 可以展开成之前写的宏 `nlet-tail`。同样的，
有时将宏自身组合起来也很有用，这样就会有递归展开。
