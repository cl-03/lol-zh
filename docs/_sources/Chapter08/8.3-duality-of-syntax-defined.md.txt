# 8.3 语法二元性


---

Author: Doug Hoyte <[doug@hoytech.com](mailto:doug@hoytech.com)>

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

如果忘了本书中的其他内容，那么请记住本节的信息。 在这里，我们最终定义并解释了一个我们一直触及的概念：语法的二元性。 本节假定你至少阅读了三个介绍性章节、第 6 章：照应宏和前面的forth 章节。


对于大多数 lisp 程序员来说，lisp 编程比 Blub 编程更有效率，最终看来也更自然，这一点在经验上是显而易见的，但要回答为什么会出现这种情况很难。 虽然 lisp 确实从宏中获得了惊人的表达能力——而我们在本书和其他地方看到了许多有趣的东西——到目前为止，所有的解释都无法令人满意。 宏的真正优势是什么？ 部分解释当然包括简洁，使程序简短。 以下是宏的定义：
> Let L be a programming language, F a feature in that
> programming language, and A an arbitrary program
> in L. F provides a brevity feature if A is shorter than
> it would be in a version of L without F.

简洁特性为简洁理论提供了基础和合理性：
> The effort required to construct a program is inversely
> proportional to the amount of brevity features available
> in the programming language used.

简洁理论基于这样一种思想，即如果编程抽象使程序的表达非常简短，那么编写它们就会变得更容易，因为需要编写的代码更少。我们的 CL-PPCRE 读取宏是简洁功能的示例：将很长的 CL-PPCRE 函数名称缩短为简洁的 Perl 格式表达式，每次使用它们时都可以节省敲打键盘的次数。简洁理论非常适用于编写小程序，当我们开始时，我们就知道要去哪里。不幸的是，大多数程序都不是这样的。大多数程序——至少是有趣的程序——是通过一系列交互式编写测试周期迭代创建的，这些周期考虑了沿途每一步的反馈。抽象可能很简短，但如果总是不得不将它们更改为不同（也许同样简短）的抽象，可能不会节省太多精力。与其考虑最终程序的长度，也许应该考虑到达那里所需的过程长度。


在所有语言中，程序最终看起来都与它们开始时的方式不同。 大多数程序都是从一个简单的草图开始的，随着作者对问题的了解越来越多，这个草图会被填写并详细说明。 在我们回到简洁和二元性之前，本章将引导我们开发一个简单的程序来激发讨论：forth 环境。


嗯，我们讲到哪里了？ 啊，是的，我们已经讨论了很多关于抽象寄存器、抽象机器和线程代码的内容，以及定义了一个名为 `forward-lookup` 的单词查找实用程序、一个用于我们的 cons 线程代码的内部解释器，以及一个用于收集表示原语的列表的系统在我们的 forth 系统中。 但是在 lisp 上会发生什么呢？ 那么，对于任何混合了行为和状态的抽象来说，最自然的结构是什么？ 当然是闭包了——我们的老朋友 `let` 和 `lambda`。 有了这个想法可能会给出以下宏：
```
(defmacro new-forth ()
  `(let ,forth-registers
     (forth-install-prims)
     (lambda (v)
       (let ((word (forth-lookup v dict)))
         (if word
           (forth-handle-found)
           (forth-handle-not-found))))))
```
forth 抽象寄存器列表，`forth-registers`，直接拼接到展开中，最初将所有抽象寄存器绑定到 nil。 注意，这个宏的功能上留下了很多漏洞。 我们发现不得不定义一个接受原始表单的宏 `forward-install-prims`，以及宏 `forward-handle-found` 和 `forward-handle-not-found`。 但从这张草图中学到的最重要的一点是，没错，就是这种封闭设计看起来可行。 这个想法是通过遵循默认的 lisp 设计而产生的，它需要成为一个闭包，对于我们想要给它的每个单词都调用一次。 我们的草图概述了以下用例的实现。 在这里，我们假定创建一个新的forth环境：
```
(defvar my-forth (new-forth))
```
以下是 forth 中对 3 求平方后打印其结果的代码：
```
3 dup * print
```
 我们可以在 forth 环境中执行它，如下所示：
```
(progn
  (funcall my-forth 3)
  (funcall my-forth 'dup)
  (funcall my-forth '*)
  (funcall my-forth 'print))
```
```
(defmacro! go-forth (o!forth &rest words)
  `(dolist (w ',words)
    (funcall ,g!forth w)))
```
虽然这是个笨拙的接口，但我们是在写 lisp 程序，所以我们知道总是可以创建一个宏来隐藏这些细节，而这正是 `go-forth` 宏所做的。 注意，`go-forth` 使用了 `defmacro!` 的自动 `once-only`功能，因为 `go-forth` 的第一个参数是在用 `dolist` 定义的循环内，并且可能不会像宏的用户预期的那样被精确地计算一次。 有了 `go-forth`，将代码输入到 forth 环境变得更加干净：
```
(go-forth my-forth
  3 dup * print)
```
在这一点上，我们可能会想到，在创建新的forth环境时，我们最终会想要执行一些forth引导代码。 所以需要能够在创建闭包时调用它。 这可能需要更改程序的 let over lambda 设计，或者可能在 `new-forth` 宏周围创建某种包装函数，该函数使用 `new-forth` 宏，加载到标准库中，然后返回结果。
```
(defvar forth-stdlib nil)
(defmacro forth-stdlib-add (&rest all)
  `(setf forth-stdlib
         (nconc forth-stdlib
                ',all)))
```
由于 forth 代码只是符号和其他原子的列表，我们的标准库提供了需要的所有引导（除了一些更多的原语）可以存储在一个列表中。 变量 `forth-stdlib` 保存了这个 forth 代码列表，当新的 forths 被创建并且 `forth-stdlib-add` 宏展开为 lisp 代码时，它将把新的 forth 代码追加到 `forth-stdlib` 列表中。


适配 `new-forth` 以支持加载此标准库的最简单方法是什么？ 还记得在 6.3 节：Alet 和有限状态机中写的 alet 宏吗？ 这个宏的目的是使用 Common Lisp 的 let 创建对偶语法，同时将回指变量 `this` 绑定在提供的代码周围。 这将指向从 alet 返回的结果—— forth 闭包。


所以改变我们的草图比预期的更容易。 所要做的就是将草图中的第一个 `let`关键词改为 `alet`，然后添加一些代码以将标准环境加载到 forth 闭包中。 不必调整其他的代码，因为 `alet`的语法是故意与 `let` 保持一致的。 下面是下一次迭代的样子：
```
(defmacro new-forth ()
  `(alet ,forth-registers
     (forth-install-prims)
     (dolist (v forth-stdlib)
       (funcall this v))
     (lambda (v)
       (let ((word (forth-lookup v dict)))
         (if word
           (forth-handle-found)
           (forth-handle-not-found))))))
```
记住，`alet` 使用闭包引入了一个间接层，因此让 forth 环境效率稍低。 然而，正如我们不知道这种效率负担是否会太大，我们也不知道最终我们会不会需要这种间接性。 要消除间接性，就使用 `alet` 之前定义的 `alet%` 宏。


也许现在，或者以后当我们尝试构建和调试 forth 环境时，我们可能会想到能够从 forth 环境之外访问 forth 抽象寄存器也是有用的。不幸的是，这些变量被一个 let over lambda 封闭。我们将不得不再次更改程序以使其可访问。当然，有很多方法可以做到这一点。可以在 forth 环境中嵌入并返回多个闭包，其中一些可以保存和访问抽象寄存器，或者可以重新考虑完全放弃 lambda 策略。但在这样做之前，是否有任何二元性可以帮助我们？还记得第 6.7节： Pandoric 宏中的 plambda 吗？它的目的是使用 lambda 创建一种二元语法，但它创建的闭包实际上对外部环境开放。更改我们的草图以支持这一点很简单，只需在我们作为闭包返回的 lambda 添加个前缀字符 p 并添加要导出的变量列表。我们的列表可以方便地在 forth 寄存器中提供给我们。草图变成：
```
(defmacro new-forth ()
  `(alet ,forth-registers
     (forth-install-prims)
     (dolist (v forth-stdlib)
       (funcall this v))
     (plambda (v) ,forth-registers
        (let ((word (forth-lookup v dict)))
          (if word
            (forth-handle-found)
            (forth-handle-not-found))))))
```
随着 forth 闭包的打开，我们可以使用以下用例。 这会将五个项推入个 forth 堆栈中：
```
* (go-forth my-forth
    1 2.0 "three" 'four '(f i v e))

NIL
```
然后我们可以随意打开 `my-forth` 来检查其参数堆栈：
```
* (with-pandoric (pstack) my-forth
    pstack)
((F I V E) FOUR "three" 2.0 1)
```
这是为达到我们的新版本宏的最终版本而执行的过程。 最终定义与上一个草图相同，只是它还将 dtable 抽象寄存器设置为指向哈希表（很快就会解释）。
```
(defmacro new-forth ()
  `(alet ,forth-registers
    (setq dtable (make-hash-table))
    (forth -install -prims)
    (dolist (v forth -stdlib)
      (funcall this v))
    (plambda (v) ,forth -registers
      (let ((word (forth-lookup v dict)))
        (if word
          (forth-handle-found)
          (forth-handle-not-found))))))
```
编程，至少是有趣的编程，不是写程序，而是改变它们。 就生产力而言，简洁仅能带我们到此为止。 我们可以将 lambda 重命名为 fn，但是这个简洁的特性并没有节省太多，只是少打几个字符。 然而，真正省力的是有许多类似于 lambda 的抽象，我们可以使用它们来更改代码的含义，而无需过多地修改代码本身。 语法的二元性为我们节省了精力。


就像给你的特殊变量名加上星号一样，如果你改变了关于变量应该是特殊的还是词法的想法，就会强迫你添加或删除星号，不必要地分离语法和避免对偶可能会在编程过程中导致很多毫无意义的工作。另一个例子：`#'`你的 lambda 结构是个坏主意，因为这意味着当你决定一个函数真的需要 alambda 或者当你决定在列表的函数位置使用 lambda 结构时，需要做很多的修改。广义变量还提供了一个非常重要的对偶性：在编写宏时，可以将相同的结构拼接成展开，用于访问和修改变量。 Common Lisp 对空列表和 false 布尔值的双重含义是又一个例子——除了语法的双重性之外，没有真正的理由这两者应该相同。对偶性也是本书提倡闭包而不是其他 CLOS 特性（如 `defclass` 和 `defmethod`）的原因。与修改使用类和对象的程序相比，修改使用闭包的程序时阻力通常更小，因为我们有很多很好的闭包语法二元性，而且构建闭包的编程宏更加统一。考虑到这些和其他例子，终于可以对语法二元性的含义给出一个清晰的定义：
> Let L be a programming language, F a feature in that
> programming language, and A and B arbitrary programs
> in L. F provides a duality of syntax feature if the
> modifications required to change A into B become
> fewer than in a version of L without F.

这就有了二元性理论：
> The effort required to construct a program is inversely
> proportional to the amount of dual syntax available in
> the programming language used.

虽然语法二元性的概念及其好处的影响都非常清楚，但如何实际设计好的二元性却远没有那么清楚。 某种语言中最有用的二元性是什么？ 我们如何判断两种不同语言中的哪一种会为某些给定问题提供更好的语法二元性？


因为使用 lisp，我们完全控制了编程语言，所以我们可以根据需要使用或多或少的双重语法来设计我们的语言。 在我看来，遵循这种思路是当今编程语言研究最富有成果的领域。 使用 lisp 宏，我们可以使所有不同的程序彼此相似到何种程度，从而使将它们更改为新程序变得容易得多？


在简洁性和对偶性的定义中，特征 F 是否有效取决于正在编写或更改的程序。 有时，提供简洁性或二元性的功能在某些情况下实际上会增加所需的工作量。 最好的方法可能是提供尽可能多的有用的简洁性和二元性功能，同时删除那些最终会带来更多麻烦的功能。
