# 2.6 Lambda Over Let Over Lambda

---

Author: Doug Hoyte

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

In some object systems there is a sharp distinction between objects, collections of procedures with associated state, and classes, the data structures used to create objects. This distinction doesn't exist with closures. We saw examples of forms you can evaluate to create closures, most of them following the pattern let over lambda, but how can our program create these objects as needed?


The answer is profoundly simple. If we can evaluate them in the REPL, we can evaluate them inside a function too. What if we create a function whose sole purpose is to evaluate a let over lambda and return the result? Because we use **lambda** to represent functions, it would look something like this:
```
(lambda ()
  (let ((counter 0))
    (lambda () (incf counter))))
```
When the _lambda over let over lambda_ is invoked, a new closure containing a counter binding will be created and returned. Remember that **lambda** expressions are constants: mere pointers to machine code. This expression is a simple bit of code that creates new environments to close over the inner **lambda** expression (which is itself a constant, compiled form), just as we were doing at the REPL.


With object systems, a piece of code that creates objects is called a class. But lambda over let over lambda is subtly different than the classes of many languages. While most languages require classes to be named, this pattern avoids naming altogether. Lambda over let over lambda forms can be called _anonymous classes_.


Although anonymous classes are often useful, we usually do name classes. The easiest way to give them names is to recognise that such classes are regular functions. How do we normally name functions? With the **defun** form, of course. After naming, the above anonymous class becomes:
```
(defun counter-class ()
  (let ((counter 0))
    (lambda () (incf counter))))
```
Where did the first **lambda** go? **Defun** supplies an _implicit lambda_ around the forms in its body. When you write regular functions with **defun** they are still lambda forms underneath but this fact is hidden beneath the surface of the **defun** syntax.


Unfortunately, most lisp programming books don't provide realistic examples of closure usage, leaving readers with the inaccurate impression that closures are only good for toy examples like counters. Nothing could be further from the truth. Closures are the building blocks of lisp. Environments, the functions defined inside those environments, and macros like **defun** that make using them convenient, are all that are needed for modelling any problem. This book aims to stop beginning lisp programmers used to object-based languages from acting upon their gut instinct of reaching for systems like CLOS. While CLOS does have certain things to offer the professional lisp programmer, do not use it when a lambda will suffice.
```
(defun block-scanner (trigger-string)
  (let* ((trig (coerce trigger-string 'list))
         (curr trig))
    (lambda (data-string)
      (let ((data (coerce data-string 'list)))
        (dolist (c data)
          (if curr
            (setq curr
                  (if (char= (car curr) c)
                    (cdr curr) ; next char
                    trig))))   ; start over
        (not curr))))) ; return t if found
```
In order to motivate the use of closures, a realistic example is presented: **block-scanner**. The problem **block-scanner** solves is that for some forms of data transfer the data is delivered in groups (blocks) of uncertain sizes. These sizes are generally convenient for the underlying system but not for the application programmer, often being determined by things like operating system buffers, hard drive blocks, or network packets. Scanning a stream of data for a specific sequence requires more than just scanning each block as it comes in with a regular, stateless procedure. We need to keep state between the scanning of each block because it is possible that the sequence we are scanning for will be split between two (or more) blocks.


The most straightforward, natural way to implement this stored state in modern languages is with a closure. An initial sketch of a closure-based block scanner is given as **block-scanner**. Like all lisp development, creating closures is an iterative process. We might start off with code given in **block-scanner** and decide to improve its efficiency by avoiding coercion of strings to lists, or possibly improve the information gathered by counting the number of occurrences of the sequence.


Although **block-scanner** is an initial implementation waiting to be improved, it is still a good demonstration of the use of lambda over let over lambda. Here is a demonstration of its use, pretending to be some sort of communications tap watching out for a specific black-listed word, _jihad_:
```
* (defvar scanner
    (block-scanner "jihad"))

SCANNER
* (funcall scanner "We will start ")

NIL
# (funcall scanner "the ji")

NIL
* (funcall scanner "had tomorrow.")

T
```
