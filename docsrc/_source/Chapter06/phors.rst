.. _phors:

==================================
6.1 More Phors？
==================================

:Author: Doug Hoyte
:Translator: Yuqi Liu <yuqi.lyle@outlook.com>

Paul Graham 的《On Lisp》中一些有趣的宏是回指宏（anaphoric macros）。回指宏是特意从宏结构中捕捉变量的宏。多亏了它们的显示声明，这些特意捕获的变量为我们提供了控制宏展开的窗口。通过这些窗口，可以用组合操作来控制宏展开。

《On Lisp》中标准的回指宏的命名是根据 anaphor 和它的复数形式 anaphora 的字面意思。回指是种捕获 U 语言的一个空闲单词，然后将这个单词用在之后的 U 语言中的方法。在编程术语中，实现典型的回指意味着在代码中——或者即将编写的代码中——找到可以利用之前表达式结果的位置。Graham 的回指和相关代码值得深究。特别是宏 ``defanaph``，它支持一些有趣的自动回指（automatic anaphor）编程类型。

经过一段时间的使用，发现《On Lisp》中最好用的回指宏就是 ``alambda``。它也是个最简单和最优雅的回指宏及特意捕捉变量的展示。

.. code-block::

  ;; Graham 's alambda
  (defmacro alambda (parms &body body)
    `(labels ((self ,parms ,@body))
        #'self))

通过 ``alambda``，我们捕捉到 ``self`` 这个变量名，所以就可以在之后构建的匿名函数中引用这个变量。换句话说，递归就像调用 ``self`` 一样简单。例如，下面的函数返回从 ``n`` 到 1 的一个列表：

.. code-block::

  (alambda (n)
    (if (> n 0)
      (cons
        n
        (self (- n 1)))))

``alambda`` 让代码更直观、更易读，并会改变我们的思维，即匿名函数是否应该像添加一个字母那样容易调用自己。因为 ``alambda`` 对 ``self`` 绑定的显示定义，而且使用 ``alambda`` 的唯一原因就是利用这个绑定，所以不会出现异常变量捕获的问题。

《On Lisp》中的另一个方便的回指宏是 ``aif``，这个宏将测试子句的结果绑定到 ``it`` ，然后在 true 子句(辅助子句或结果子句)使用中使用。``aif`` 用了一个 COMMON LISP 很重要的特性：广义布尔值。在 COMMON LISP 中，任何非空值都是一个真布尔值，所以 COMMON LISP 程序员通常会在真值中嵌入有趣的信息。保留了真值和假值的语言(尤其是Scheme)使用显式布尔值，有时会强制抛出额外的信息来满足冗余的类型约束。Scheme 实际上添加了个组装程序（kludge），让 ``if``、``cond``、``and``、``or`` 和 ``do`` 接受非布尔值。当然，COMMON LISP 的设计才是对的 —— 一切都是布尔值。

.. code-block::

  ;; Graham 's aif
  (defmacro aif (test then &optional else)
    `(let ((it ,test))
       (if it ,then ,else)))

还必须指出，``aif`` 和 ``alambda``，就像所有的回指宏一样，违反了词法透明。用现在流行的话来说，它们是不正常（unhygienic）的宏。也就是说，像本书中的许多宏一样，回指宏无形地引入了词法绑定，因此不能在严格执行安全的宏系统中创建。即使是绝大多数 Scheme 系统，这个在安全方面试验最多的平台，也有不安全的的 defmacro 风格的宏 —— 大概是因为就连Scheme的实现这也不太重视安全吧。就像自行车上的辅助轮一样，在大多数情况下安全系统都是要丢掉的玩具，即使只掌握了一点技能。

是的，还有很多关于特定变量捕获的有趣的事可以做。还有很多 phors。本书和 Graham 的《On Lisp》只描述了这种技术内在潜力的一小部分。更多不可思议的创造将会出现在回指宏的智能应用中。

在穿插的阅读宏，简短地介绍了下回指宏后，本章的剩余部分将介绍现代的、具体的回指宏应用，一个与本书的中心主旨相关的：词汇闭包 —— let over lambda。本章的大部分内容将介绍一些用于定制、调整和扩展闭包的有趣的回指宏。虽然这些主题在实际代码中的应用非常实用，但它们的主要目的是一个讨论回指宏的属性和变化的平台。用宏来扩展闭包这个概念是当前的一个热点研究课题。