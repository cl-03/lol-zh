# 5.4 使用 `macrolet` 遍历代码

---

Author: Doug Hoyte <[doug@hoytech.com](mailto:doug@hoytech.com)>

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---



> Lisp 不是门语言，而是构建语言的原料。 —— Alan Kay



像计算机代码，写出的表达式结构基本不会说话，，因此往往会有多种不同的发音习惯。大多数
程序员在脑中会有个对话，推理表达式和读出运算符，有时是有意识的，但大部分情况下是无意
识的。例如，lisp 的 `macrolet` 的发音最简单的方法就是把两个 lisp 关键字 （`macro` 和
`let`）连起来读。但看过 Steele 的 observation 后，部分程序员会用 `Chevrolet` 押韵的方式
来读 `macrolet`，这种幽默的发音很难从脑中的对话中去掉。


不管 `macrolet` 是怎么读的，它都是 lisp 高级编程里很重要的一部分。`macrolet` 是个特殊
的 COMMON LISP 结构，它在其封闭的词法作用域中引入新的宏。`macrolet` 的语法转换和
`defmacro` 定义全局的宏一样。就像 lisp 会在代码中展开以 `defmacro` 定义的宏，当 lisp
遍历代码中的表达式一样，`macrolet` 定义的宏也会被展开。


但 `macrolet` 的不止有这么点功能。与 `defmacro` 相比，`macrolet` 有很多重要的优点。
首先，如果你想要通过给定不同的表达式的内容让宏以不同的方式展开，就需要使用 `macrolet`
来创建不同的内容。而这是 `defmarco` 做不到的。


最重要的是，`macrolet` 很有用，因为遍历 COMMON LISP 表达式的代码很难。对任意的 lisp
 代码树，假设是因为用宏在处理它，然后我们想要改变不同分支的值或含义。为了实现某些结构
的临时含义，以及临时重写某些特定宏（可能只是表达式词法上下文中特定部分），我们需要
遍历代码。具体来说，需要递归地遍历代码，在需要求值的位置查找所需的宏或函数名，然后
用自己的表达式替换他的位置。


很简单，对吧？难点在于，很多正常的 lisp 代码段会破坏原生的代码遍历的实现。假设我们想
要对一个函数执行的特定符号（ `blah` ）进行替换，当给出以下表达式时，就很容易看出替
换位置：
```
(blah t)
```
`blah` 所在的位置是表达式的函数位置，当表达式计算时，`blah` 会被调用，显然，我们需要
在这个时候对 `blah` 进行替换。目前来说还不错，但如果传入下面这个结构会怎么样呢？
```
'(blah t)
```
因为表达式是被引用的，所以上面的代码的意思是直接返回一个列表。这里进行替换的话就会
出错。所以我们的代码遍历器在遇到引号（`'`）时，必须停止，同时不会去替换引用的结构中
的内容。很好，这也很简单。但考虑一下其他无法展开 blah 的场景。假如 `blah` 是个词法
变量的变量名呢？
```
(let ((blah t))
  blah)
```
尽管 `blah` 是列表中的第一个位置，但这里它是 `let` 结构中的本地绑定，而这种绑定是不
会被展开的。但这也不算太糟糕。解决办法是可以在代码遍历器中添加一些特殊的逻辑，这样
代码遍历器就知道在遇到 `let` 结构时该怎么处理。不幸的是，ANSI COMMON LISP 中还有
23 个这种的特殊结构，这些结构也需要添加特定的逻辑。更重要的是，许多特殊结构很复杂，
不能正确的进行遍历。 正如上面所见的 `let`，比较棘手，而且还有更糟的情况。下面一段
合规的 COMMON LISP 代码结构中有个 `blah` 需要展开。但是具体是哪一个呢？
```
(let (blah (blah (blah blah)))
  blah)
```
所以说遍历代码是很难的，因为要正确地处理特殊结构很难（见 [special-forms] 和
[USEFUL-LISP-ALGOS]）。注意，对定义为宏的结构，我们不会要特殊的逻辑。在遇到宏时，
可以简单地展开它，直到它变成函数调用或特殊的结构。如果是个函数的话，我们知道函数
遵循 lambda 从左到右且仅执行一次的语义。这才是需要开发特定的逻辑来处理的特殊结构。


听起来有很多工作要做，不是吗？事实确实是这样的。完整的 COMMON LISP 代码遍历器，
尤其是设计成可移植时，是段庞大且复杂的代码。那为什么 COMMON LISP 不提供个接口来
遍历 COMMON LISP 的代码呢？Emm，在某种程度上，COMMON LISP 确实提供了这个接
口，而这个接口的就叫做 `macrolet`。代码遍历正是Common Lisp系统在计算或编译表达式
之前需要做的事情。就像我们假设的代码遍历器一样，COMMON LISP 需要理解并处理 `let`
和其他特殊结构的特殊语义。


因为 COMMON LISP 在执行代码时需要遍历这些代码，所以没必要写一个单独的代码遍历器。
如果想要对表达式选择性转换，以一种智能的方式来计算实际需要计算的内容，可以将这个转换
打包成宏，然后使用 `macrolet` 结构将这个表达式包裹起来。当这个表达式被执行或编译时，
COMMON LISP 会遍历其代码，然后应用由 `macrolet` 指定的宏转换。当然，由于
`macrolet` 定义了这些宏，所以它不会在运行时增加任何额外的开销。`macrolet` 用于与
COMMON LISP 的代码遍历程序通信，而 COMMON LISP 对宏何时展开的唯一保证是它将在
编译函数的运行时之前完成。


使用 `macrolet` 最常见的一个场景就是，当你想假装一个函数绑定在某个词法上下文中，
但希望使用这个结构的行为不是函数调用。`flet` 和 `labels` 就不行了：他们只能定义
函数。所以我们选择写个代码遍历器来调用该函数，并将其替换为别的，用 `defmacro`
定义一个全局宏所以该“函数”会展开成别的，或是将这个结构嵌在 `macrolet` 中然后让
系统的代码遍历器来执行。


综上所述，实现个代码遍历器很难。如果可以的话，最好是避开这条路。用全局的
`defmacro` 有时可以实现，但通常都有问题。最大的问题是 COMMON LISP 无法保证
宏展开的时间或频率，因此无法可靠地在不同的词法上下文中使相同的变量名具有不同的
含义。当重写全局宏时，我们无法确定 COMMON LISP 之前使用该宏是否已经展开过，
或者之后是不是还需不需要再次进行展开。


为了举例说明这种代码遍历的用处，让我们重新讨论在 [3.3 Control Structures](../Chapter03/3.3-control-structures.md) 中忽略
的问题。名为 `nlet` 的 Scheme 初始版本的 `let` 宏，是用 `label` 这个特定的结构
创建了个新的控制结构类型。`labels` 的这种用法允许我们临时定义函数，以便在
`let` 主题中使用，该函数允许递归，就像在 `let` 绑定中再次使用 `let` 绑定新的值
一样。当定义这个函数时，我们提到，因为 COMMON LISP 不能保证它将优化掉尾调用，
所以这个 `let` 控制结构每次迭代都可能会占用不必要的额外堆栈空间。换句话说，不同
于 Scheme，COMMON LISP 函数调用不能保证是优化的尾部调用。


即使大部分像样的 COMMON LISP 编译器都会执行适当的尾部调用优化，有时我们需要
确认优化已经进行了。最简单的、可移植的实现方法是修改 `nlet` 宏，这样它生成展开
时就不会使用不必要的堆栈空间。
```
(defmacro! nlet-tail (n letargs &rest body)
  (let ((gs (loop for i in letargs
                  collect (gensym))))
    `(macrolet
       ((,n ,gs
          `(progn
             (psetq
              ,@(apply #'nconc
                       (mapcar
                         #'list
                         ',(mapcar #'car letargs)
                         (list ,@gs))))
             (go ,',g!n))))
        (block ,g!b
          (let ,letargs
            (tagbody
              ,g!n (return-from
                     ,g!b (progn ,@body))))))))
```
在 `nlet-tail` 中，我们将宏的主体嵌在了一些其他的结构中。我们用 `block` 和
`return-from` 语句来返回最后那个表达式的值，因为我们想要模拟 `let` 结构的行为
和它的隐式 `progn`。注意我们在 `block` 中用了 `gensym` 变量名，同时在每个 `let`
中都用 `gensym` 生成参数名，这样可以避免不必要的异常捕获，然后用 `loop` 宏将这
些 `gensyms` 汇集起来。


`nlet-tail` 和我们最初的 `nlet` 的结构是一样的，除了非尾部的 `let` 结构调用被
禁用，因为这些 `let` 结构会展开成尾部调用。下面是个和介绍 `nlet` 是使用一样无趣
的例子，不同的是这个例子中可以保证，即使在不执行尾部调用优化的 lisp 中，也不会
消耗额外的堆栈空间。
```
(defun nlet-tail-fact (n)
  (nlet-tail fact ((n n) (acc 1))
    (if (zerop n)
      acc
      (fact (- n 1) (* acc n)))))
```
因为这是本节的示例，注意，我们用 `macrolet` 对提供的内容进行代码遍历，来查找
`fact`。在之前的 `nlet` 用 `labels` 来制定结构绑定函数的地方，我们希望确保在调用
`let` 结构时不会消耗额外的堆栈空间。从技术上来说，我们希望修改词法环境中的一些
绑定，然后跳转回这个 `let` 结构的顶部。因此 `nlet-tail` 接受上面示例中 `let` 的
名称，并创建个本地宏，该宏只在对应的代码主体中生效。这个宏展开的代码中，使用
`psetq` 将 `let` 的绑定设为提供的新的值，然后跳转回顶部，不需要堆栈空间。最重要
的是，我们可以在程序中其他无关的宏中使用 `fact` 这个变量名。


为了实现这个跳转， `nlet-tail` 使用了 lisp 的特殊结构 ——`tagbody` 和 `go` 的组合。
这两个结构提供了个跳转（goto）系统。尽管结构化编程带来的问题（不管这意味着什么）
讨论广泛，COMMON LISP 提供这些特殊结构的原因正是我们在这里使用它们的原因。通过
控制程序计数器（执行中代码的当前位置），可以创建很有效的宏展开。虽然在现代高级语
言中，通常都不推荐用 `goto`，但快速浏览任意的汇编代码，就会发现 `goto` 在计算机软件
最底层上非常活跃。即使是最坚定的反 `goto` 倡导者也不建议抛弃像 C 这样的低级语言以及
`goto` 和 `jump` 汇编指令。在底层编程中，要想写出高效的代码，似乎只要 `goto`。


然而，正如 Alan Kay 所说， lisp 不是门语言，而是个构建原料。讨论 lisp 是否是高级还是
低级语言完全没有意义。有很高级的 lisp，如特定域（domain specific）语言。通过编写的
用于处理这些语言的宏，我们将它们的用法转换为较低层次的 lisp。当然，这些展开也是
lisp 代码，只是不像原始版本那样压缩。接下来，通常我们将这个中级的 lisp 代码交给编译器，
编译器会将这些代码转换为更低级别的 lisp 代码。用不多久，诸如 `go-to`、条件分支和位
填充等概念就会出现在代码中，但即便如此，代码还是 lisp。最后，使用本地代码编译器，
高级 lisp 程序将会转换成汇编语言。但即使是这时，代码依然还是 lisp。这是因为大部分 lisp
汇编程序都是用 lisp 本身编写的，所以很自然地这些汇编程序都保存为 lisp 对象，这样就产生
真正的 lisp 底层程序。只有程序真正变成二进制机器码时，它才不再是lisp。难道不是吗？


高阶或低阶的区别在 lisp 中不适用，lisp 程序的级别完全取决于视角。 Lisp 不是门语言，而是
迄今为止所发现的最灵活的软件构建原料。
