# 7.7 编写基准测试

---

Author: Doug Hoyte

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

编译器对大多数程序员来说是一个可怕的概念，因为大多数语言都不适合编写编译器。下面是个类比：解析一个复杂的日志文件对于只知道 C 或汇编的程序员来说可能是一个令人生畏的、容易出错的愿景，但由于 Perl 和正则表达式，这对我们多语言程序员来说不是问题。同样，如果我们不了解 lisp，那么设计一种功能强大、富有表现力的编程语言，然后创建一个编译器将这种语言的程序转换为高效的机器代码将是项令人生畏的任务。在编写编译器方面，Lisp 的优势不仅使它比其他语言好一点——实际上让表达式上了一个新台阶。一般来说，这个优势是能与不能的区别。 Lisp 程序员在任何地方都使用编译器，且有时以非 lisp 程序员难以致信的方式和任务使用。有多少 C 程序员考虑过 [7.2 Macros Make Lisp Fast](./7.2-macros-make-lisp-fast.md)中描述（并克服）的 printf 函数的解释开销？有多少人会尝试为 printf 编写编译器？而这在 lisp 的课程中却是标准。一切都应该编译成 lisp。


什么是编译器？如果你来自 Blub，答案可能隐藏在一大堆解释解析、语法定向翻译、上下文无关语法等的书籍中。但别担心，这是 lisp，编译器很容易。它是如此简单，以至于如果你曾认真的做过 lisp 编程相关的编程，那么你已经编写了它们，甚至可能没有意识到。编译器的另一个名称是“宏”。宏将程序从一种语言编译成另一种语言。 Lisp 实际上就是编写这些编译器——其他一切都是次要的。在 lisp 中，编译器设计唯一重要的方面是如何保持目标程序的正确性，同时为它找到有效的扩展。换句话说，这才是编译问题的本质。到目前为止，我们已经看到了如何使用宏来创建完全适合手头任务的自定义语言，以及如何通过使用声明来消除对偶性和安全检查来提高 lisp 代码的效率。有效的编译器编写只是将这两种技能结合起来。
```
(defun sn-to-lambda-form% (sn)
  `(lambda (arr)
    #f
    (declare (type (simple -array fixnum) arr))
    ,@(mapcar
        #`(if (> #1=(aref arr ,(car a1))
                 #2=(aref arr ,(cadr a1)))
             (rotatef #1# #2#))
        sn)
		arr))
```
当在[7.2 Macros Make Lisp Fast](./7.2-macros-make-lisp-fast.md)中创建编译器宏来处理格式时，格式化程序编译器扩展成什么？ 这是一个 lambda 结构。 编译为 lambda 结构有时是有意义的，因为我们可以使用 compile 函数直接将它们转换为机器代码。 回到上一章的排序网络，`sn-to-lambda-form%` 是一个返回 lambda 结构的函数。 这种 lambda 结构将对基于列表的排序网络中的每个比较交换操作都有一个指令。 每条指令都会（不安全地）索引到一个 `fixnum` 数组，比较并可能使用 `rotatef` 来交换元素。 `fixnum` 数组将作为参数 (`arr`) 传递给由此 lambda 结构创建的函数。 这就是一个体面的机器代码编译器的全部内容。 与所有 lambda结构一样，由于 lambda 宏，我们能够计算它们以获取函数：
```
* (eval
    (sn-to-lambda-form%
      (build-batcher-sn 3)))
#<Interpreted Function>
```
只需在它们上调用 `compile` 即可成为编译函数：
```
* (compile nil *)
#<Function>
```
让我们看一下反汇编输出（编译后的展开）：
```
* (disassemble *)
...
;;; (> (AREF ARR 0) (AREF ARR 2))
9E:       MOV
A1:       MOV
A4:       CMP
A6:       JLE
EAX, [EDX+1]
ECX, [EDX+9]
EAX, ECX
L0
;;; (ROTATEF (AREF ARR 0) (AREF ARR 2))
A8:       MOV
AB:       MOV
AE:       MOV
B1:       MOV
EAX, [EDX+9]
ECX, [EDX+1]
[EDX+1], EAX
[EDX+9], ECX
;;; (> (AREF ARR 0) (AREF ARR 1))
B4: L0:   MOV
B7:       MOV
BA:       CMP
BC:       JLE
EAX, [EDX+1]
ECX, [EDX+5]
EAX, ECX
L1
;;; (ROTATEF (AREF ARR 0) (AREF ARR 1))
      BE:       MOV     EAX, [EDX+5]
C1:       MOV
C4:       MOV
C7:       MOV
ECX, [EDX+1]
[EDX+1], EAX
[EDX+5], ECX
;;; (> (AREF ARR 1) (AREF ARR 2))
CA: L1:   MOV
CD:       MOV
D0:       CMP
D2:       JLE
EAX, [EDX+5]
ECX, [EDX+9]
EAX, ECX
L2
;;; (ROTATEF (AREF ARR 1) (AREF ARR 2))
D4:       MOV           EAX, [EDX+9]
D7:       MOV           ECX, [EDX+5]
DA:       MOV           [EDX+5], EAX
DD:       MOV           [EDX+9], ECX
E0: L2:   ...

```
上面的机器代码很快，但还可以更快。 Lisp 编译器很聪明——一些最聪明的编译器 —— 但它们总是可以更聪明。 在关心性能的极少数情况下，检查编译的展开是至关重要的，因为很难知道你的 lisp 编译器有多聪明。 在上面的汇编中，如果仔细看，就会发现它每次执行交换时实际上都在执行不必要的读取操作。 问题是 `rotatef` 展开为冗余访问。 一个足够聪明的编译器可能会发现在寄存器中已经有这个值，并且可以避免数组访问。 但是我的没有，所以我重新构建了代码，从而实现了更有效的扩展。


`sn-to-lambda-form` 是 `sn-to-lambda-form%` 的改进版本。 它为读入的变量创建临时绑定，因此不会为交换操作重新执行数组读取指令。 下面是高级编译展开：
```
* (disassemble
    (compile nil
      (sn-to-lambda-form%
        (build-batcher-sn 3))))
...
;;; (LET ((A (AREF ARR 0)) (B (AREF ARR 2))) ...)

 2E:       MOV
 31:       MOV
 34:       CMP
 36:       JLE

EAX, [EDX+1]
ECX, [EDX+9]
EAX, ECX
L0

 ;;; (SETF (AREF ARR 0) B (AREF ARR 2) A)
      38:       MOV     [EDX+1], ECX
      3B:       MOV     [EDX+9], EAX
;;; (LET ((A (AREF ARR 0)) (B (AREF ARR 1))) ...)
3E: L0:   MOV
41:       MOV
44:       CMP
46:       JLE

EAX, [EDX+1]
ECX, [EDX+5]
EAX, ECX
L1

;;; (SETF (AREF ARR 0) B (AREF ARR 1) A)
      48:       MOV     [EDX+1], ECX
      4B:       MOV     [EDX+5], EAX
;;; (LET ((A (AREF ARR 1)) (B (AREF ARR 2))) ...)
4E: L1:   MOV
51:       MOV
54:       CMP
56:       JLE

EAX, [EDX+5]
ECX, [EDX+9]
EAX, ECX
L2

;;; (SETF (AREF ARR 1) B (AREF ARR 2) A)
      58:       MOV     [EDX+5], ECX
      5B:       MOV     [EDX+9], EAX
      5E: L2: ...
```
熟悉 lisp 编译器以便了解宏展开的效率对编写高效的 lisp 非常重要。 反汇编 lisp 系统的源代码，使用像 `time` 宏这样的基准测试工具，以及大量的耐心，不幸的是，这是真正获得如何编写快速 lisp 代码的直觉的唯一方法。


如果你来自 Blub 语言，那么像 `sn-to-lambda-form` 宏那样展开为 lambda 结构可能是实现编译器的最明显方式。 源代码以 lambda 结构编译到反汇编循环感觉很像Blub的编辑、编译、反汇编循环。 把源代码放进去，然后把机器代码拿出来。 但是，这种方法可能更笨拙。 在 lisp 中，通常将编译器创建为不可见的 - 直接合并到其他 lisp 程序中。 理想情况下，除非我们想让东西快速运行，否则永远不会调用 `compile` 函数。 宏不应该一直编译到机器代码，而只是足以创建一个良好的展开，以便编译器在运行时，将有足够的信息来使整个程序高效。


我们特别不想在运行时调用 `compile`。 编译是一项昂贵的操作，因为需要展开许多级别的宏来编译某些东西。 不要在运行时调用 `compile`，记住 lisp 已经在编译函数中编译了所有的 lambda 结构。 由于这种在运行时构造已编译代码的闭包的能力，很容易确保在编译时完成尽可能多的计算，同时仍然在运行时创建任意函数（闭包）。
```
(defmacro! sortf (comparator &rest places)
  (if places
		`(tagbody
    	,@(mapcar
				#`(let ((,g!a #1=,(nth (car a1) places))
        				(,g!b #2=,(nth (cadr a1) places)))
							(if (,comparator ,g!b ,g!a)
              	(setf #1# ,g!b
											#2# ,g!a)))
        (build-batcher-sn (length places))))))
```
`sortf` 是本书中我最喜欢的宏。 它不仅简洁、优雅，并且很好地展示了迄今为止描述的许多宏技术，而且它还是一段有用的生产代码，能够执行极快的排序操作。 最棒的是，这个宏与 lisp 程序完美融合，使用起来毫不费力。 我们不必费尽心思就能从这种先进的 lisp 优化中受益。 任何时候需要对小的、固定大小的数据集进行排序，这个宏很容易合并，有时甚至比排序函数更容易。 `sortf` 不是展开为 lambda 结构，而是扩展为 tagbody 结构，因为 tagbody 是返回 nil 的标准 `progn`。 以下是 `sortf` 的展开：
```
* (macroexpand
    '(sortf < a b c))

(LET ()
  (TAGBODY
    (LET ((#:A1824 A) (#:B1823 C))
      (IF (< #:B1823 #:A1824)
        (SETF A #:B1823 C #:A1824)))
    (LET ((#:A1824 A) (#:B1823 B))
      (IF (< #:B1823 #:A1824)
        (SETF A #:B1823 B #:A1824)))
    (LET ((#:A1824 B) (#:B1823 C))
      (IF (< #:B1823 #:A1824)
      (SETF B #:B1823 C #:A1824)))))
  T
```
`sortf` 的接口设计来自于 On Lisp，但它是如此自然，以至于几乎每个 lisp 程序员都会这样实现。 第一个参数通常是表示比较运算符的符号 —— 通常类似于 `<`。 这通常表示一个函数，但正如 Graham 指出的那样，它也可以表示一个宏或特殊结构，因为它直接拼接到列表的函数位置。 我们甚至可以传递一个 lambda 结构，因为它们也允许在列表的函数位置：
```
* (let ((a -3) (b 2))
    (sortf (lambda (a b) (< (abs a) (abs b)))
      a b)
    (list a b))
(2 -3)
```
和 Graham 的宏一样，要排序的参数是广义变量。 这意味着可以用 `sortf` 对任何类型的变量进行排序，不仅是那些由符号表示的变量，还包括任何可以 `setf` 的变量。 以下是个示例：
```
* (let ((a 2) (b '(4)) (c #(3 1)))
    (sortf < a (car b) (aref c 0) (aref c 1))
    (format t "a=~a b=~a c=~a~%" a b c))

a=1 b=(2) c=#(3 4)
NIL
```
虽然 Graham 的 `sortf` 和我们的 `sortf`编译相同的源语言，但它们的展开却大有不同。 Graham 的宏可以说比我们的更正确，因为它只会执行一次访问这些位置的代码。使用 Graham 的 	`sortf`，我们可以传入具有副作用的变量，并且只对它们进行一次计算，正如预期的那样。例如，Graham 的 `sortf` 在给定位置时只会增加 `i` 一次 `(aref arr (incf i))`。 Graham 的 `sortf` 的工作原理是将每个要排序的变量复制到临时绑定中，使用冒泡排序对这些临时绑定进行排序，然后使用 `setf`表达式将临时变量写回原来的位置，现在按排序顺序。相反，我们的 `sortf` 将在整个排序过程中多词计算每个位置格式，因此建议不要使用有副作用的位置。这种设计的另一个结果是，如果追求效率，请确保访问器是高效的。特别是不要使用像 `caddr` 这样的长列表访问器，因为它们最终会多次遍历列表。通过我们的实现，我们就地对参数进行排序，即没有任何临时绑定。代替具有 (O (expt N 2)) 的 Big-O 复杂度的冒泡排序，我们使用 Batcher 更好的合并交换排序及其 (O (* N (expt (log N) 2)))。有一些方法可以构建 (O (* N (log N))) 的排序网络，与快速排序相同 - 但大多数对小型网络使用的操作比 Batcher 的要多。


你可能希望在调用 `sortf`的地方添加个 `sharp-f` 快速声明，因为它自身不会添加它。 如果想要真正快速的排序，请确保编译器知道要排序的所有广义变量的类型。 如果确实指定了类型，请始终确保将所有通用变量声明为相同类型。 这很重要，因为任何元素最终可能出现在任何地方。

但是我们怎么知道这个宏是否真的给我们任何优于排序函数的性能优势呢？ 我们需要对其进行基准测试。 基准测试已经讨论过很多了，因为，特别是对程序员来说，胡说八道的永恒爱好是如此令人愉快。 不幸的是，几乎所有的基准测试结果都是无用的。 甚至建议对本书中的基准测试结果持保留态度。 也就是说，在同一台机器上运行在同一个 lisp 映像上运行的代码版本略有不同的精心设计、受控的实验对于理解和修复性能瓶颈有时是无价的。 这种计量很有用，因为我们不仅可以判断哪些技术更有效，而且我们还可以判断它们的效率有多高。 因为他们为我们编写代码，所以宏是设置这些实验的最佳工具。
```
(defmacro sort-benchmark-time ()
  `(progn
     (setq sorter (compile nil sorter))
     (let ((arr (make-array
                n :element-type 'fixnum)))
        (time
					(loop for i from 1 to iters do
            (loop for j from 0 to (1- n) do
              (setf (aref arr j) (random n)))
            (funcall sorter arr))))))
```
`sort-benchmark-time` 宏是我们实验中的一个组件。 它展开为假定 lambda 结构或函数绑定到 `sorter` 的代码，并且该函数将对大小为 `n` 的 `fixnum` 数组进行排序。 然后将它编译成一个函数并使用它对随机生成的数组进行排序迭代。 `time`宏用于收集有关排序过程所需时间。


`do-sort-benchmark` 是执行基准测试的实际接口。 给定数据集大小 `n` 和迭代数 `iters`，它将同时测试 Common Lisp 排序函数和我们的 `sortf` 宏。 其保留随机数生成器的状态，并在执行排序测量之后但在运行 `sortf` 之前将其重置，以便要排序的随机数组相同。 运行时编译 `do-sort-benchmark` 非常重要，这样我们的测试中可能会出现最少的噪声（noise）。
```
(defun do-sort-benchmark (n iters)
  (let ((rs (make-random-state *random-state*)))
		(format t "CL sort:~%")
    (let ((sorter
						'(lambda (arr)
      					#f
								(declare (type (simple-array fixnum)
          							 				arr))
								(sort arr #'<))))
      (sort-benchmark-time))

    (setf *random -state* rs)
    (format t "sortf:~%")
    (let ((sorter
            `(lambda (arr)
            #f
            (declare (type (simple-array fixnum)
                            arr))
            (sortf <
                   ,@(loop for i from 0 to (1- n)
                           collect `(aref arr ,i)))
             arr)))
				(sort-benchmark-time))))

(compile 'do-sort-benchmark)
```
运行时，`do-sort-benchmark` 不仅告诉我们 `sortf` 是高效的，而且就小型固定大小数据集的性能而言，通用排序算法甚至与排序网络不在同一个级别。 我们还注意到 `sortf` 没有 cons，这反过来会减少垃圾收集运行时间，从而提高性能。 以下是大小为 2、3、6、9、25、49 的数据集的结果：
```
* (do-sort-benchmark 2 1000000)
CL sort:
; Evaluation took:
;   1.65 seconds of real time
;   8,000,064 bytes consed.
sortf:
; Evaluation took:
;   0.36 seconds of real time
;   0 bytes consed.
* (do-sort-benchmark 3 1000000)
CL sort:
; Evaluation took:
;   3.65 seconds of real time
;   24,000,128 bytes consed.
sortf:
; Evaluation took:
;   0.46 seconds of real time
;   0 bytes consed.
* (do-sort-benchmark 6 1000000)
CL sort:
; Evaluation took:
;   10.37 seconds of real time
;   124,186,832 bytes consed.
sortf:
; Evaluation took:
;   0.8 seconds of real time
;   0 bytes consed.
* (do-sort-benchmark 9 1000000)
CL sort:
; Evaluation took:
;   19.45 seconds of real time
;   265,748,544 bytes consed.
sortf:
; Evaluation took:
;   1.17 seconds of real time
;   0 bytes consed.
* (do-sort-benchmark 25 1000000)
CL sort:
; Evaluation took:
;   79.53 seconds of real time
;   1,279,755,832 bytes consed.
sortf:
; Evaluation took:
;   3.41 seconds of real time
;   0 bytes consed.
* (do-sort-benchmark 49 1000000)
CL sort:
; Evaluation took:
;   183.16 seconds of real time
;   3,245,024,984 bytes consed.
sortf:
; Evaluation took:
;   8.11 seconds of real time
;   0 bytes consed.

```
因此，对于某些任务，排序网络可以对我们的系统排序例程进行数量级或更好的改进。 这些测量并不是为了让我们的排序实现看起来很糟糕（它实际上是一个出色的排序例程），而是为了展示一个现实的例子，说明使用宏进行智能编程可以带来显著的效率提升。 Lisp 宏让我们可以轻松、便携地进行智能编程。 Blub 语言在智能编程方面付出了巨大的努力，以至于 Blub 程序员几乎总是满足于愚蠢地编程。 在 lisp 中，所有内容都编译为 lisp，因此可以优化的内容永远不会有任何障碍。 如果有什么东西慢得让人无法接受，那就改变它并让它变得更快。 我们几乎从不需要东西快速运行，但是当我们这样做时，lisp 就是解决方案。
```
(defun medianf-get-best-sn (n)
  (case n
		((0) (error "Need more places for medianf"))
    ((9)  paeth -9-median -sn)
		((25) paeth -25-median -sn)
		(t    (prune-sn-for-median n
				    (build -batcher -sn n)))))

(defmacro! medianf (&rest places)
	`(progn
			,@(mapcar
					#`(let ((,g!a #1=,(nth (car a1) places))
									(,g!b #2=,(nth (cadr a1) places)))
              (if (< ,g!b ,g!a)
								(setf #1# ,g!b #2# ,g!a)))
					(medianf-get-best-sn (length places)))
      ,(nth (floor (1- (length places)) 2) ; lower
						places )))
```
另一个与 `sortf` 相似的宏是 `medianf`，它使用修剪的中值选择网络或 Paeth 手工制作的中值网络对位置进行排序，以确保中值元素处于正确位置。 在网络大小均匀的情况下，下中位数和上中位数都将在正确的位置。 与总是返回 `nil` 的 `sortf` 不同，`medianf` 将返回下中位数的值（与奇数网络大小的上中位数相同）。


正如之前所说，`sortf` 和 `medianf` 对可以设置的任何类型的位置进行排序。 对于存储在寄存器中的变量，这使 lisp 有机会生成甚至不访问内存的排序代码。 例如，这里是在三个固定位置上为 `medianf` 编译的展开：
```
* (dis ((fixnum a) (fixnum b) (fixnum c))
    #f
    (medianf a b c))
...
;;; (MEDIANF A B C)
      34:       MOV		EBX, EAX
      36:       CMP		EDX, EAX
      38:       JL 		L4
      3A: L0:   MOV		EBX, EAX
      3C:       CMP		ECX, EAX
      3E:       JL 		L3
      40: L1:   MOV		EAX, ECX
      42:       CMP		EDX, ECX
      44:       JNL		L2
      46:       MOV		ECX, EDX
      48:       MOV		EDX, EAX
      4A: L2:
...
      5B: L3:   MOV		EAX, ECX
      5D:       MOV		ECX, EBX
      5F:       JMP		L1
      61: L4:   MOV		EAX, EDX
      63:       MOV		EDX, EBX
      65:       JMP		L0
```
Lisp 比任何其他语言都更有潜力编写高效的代码，这一切都归功于宏。 因为它们非常擅长创建受控计量实验，所以宏也是确定哪些技术产生更有效结果的解决方案。 编译器是编写程序的程序，而宏是最好的方法。