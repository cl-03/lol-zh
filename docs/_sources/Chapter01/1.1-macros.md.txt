# 1.1 宏

---

Author: Doug Hoyte

Translator: Xuting Yang

Proof-Reading: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

> Lisp 的核心在编程领域中的某些方面具有一定的优势。  ——lisp 创始人谦逊之词



本书是介绍 lisp 的宏编程。与大部分编程书不同的是，本书不是只给个大概的介绍，而是
通过一系列的教程和实例，让你尽可能快速高效地掌握复杂的宏编程。掌握宏是从中级 lisp
程序员变成专业 lisp 程序员的最后一步。


宏是 lisp 编程语言的最大优势，同时也是所有编程语言的最大优势。通过宏，你可以实
现其他语言不能无法实现的功能。这是因为宏可以将 lisp 编程其他的编程语言，然后又
变回来，有经验的宏程序员会发现其他的语言都只是 lisp 的皮毛。这点很重要。lisp 的
特别之处在于它实际上是在一个更高级别编程。大多数语言都创建和制定句法和语义规
则，而 lisp 就比较通用，且可塑性强。在 lisp 中，你可以制定规则。


lisp 比其他的编程语言具有更深厚的历史。在该领域中，一些顶尖的计算机科学家为之
奋斗，让 lisp 成为了最强大和通用的编程语言。lisp 也有简明的数字标准、多个出色的
开源实现以及比其他语言更方便的宏。本文只使用 COMMON LISP，但大部分思路都适
用于其他的 lisp 方言，如 Scheme。也就是说，如果想要编写宏，希望本书能说服你
COMMON LISP 才是最好的 lisp 方言。正如其他的 lisp 方言各有其优势，COMMON
LISP 是宏专业人员当之无愧的首选。


在正确地设计编程语言方面，COMMON LISP 的设计者做的很棒。特别是在考虑到实现
的质量上，毫无疑问，COMMON LISP 是现代程序员迄今为止最好的编译环境。作为一
个程序员，你永远可以指望 COMMON LISP 按照其该有的方式运行。即便是设计者和实
现的解释器都做的很对，有些人还是觉得他们没有向我们描述清楚对的原因。对大部分
外行人来说，COMMON LISP 看起来就像个有一大堆奇怪特性的集合，因此被拒之门外，
他们转而使用一种更容易满足的语言，这注定无法体验到宏的强大之处。虽然这不是本
书的主要目的，但本书可以作为 COMMON Lisp 这门神奇语言中许多优秀特性的导览。
大部分语言都设计的易于实现；而 COMMON LISP 则设计成编程时很强大。我真诚地
希望COMMON LISP的创造者能够欣赏这本书，因为它是对该语言高级宏功能的最完整
和最容易理解的处理方法之一，同时本书也是宏这一主题的海洋中愉快的一滴水。


宏在1963年由 Timothy Hart 发明，其历史几乎与 lisp 本身一样，并非偶然。然而，大多
数lisp程序员仍然没有最大限度地使用宏，而且其他程序员也根本没有使用宏。这一直是
高级 lisper 的难题。既然宏是这么好，为什么没有人都一直用它们呢？虽然最聪明、最坚
定的程序员确实总是以 lisp 宏为终点，但很少有人从宏开始他们的编程生涯。要理解宏为
什么这么好，就需要理解 lisp 有什么是其他语言没有的。这需要对一些不怎么强大的语言
有所了解。可悲的是，大多数程序员在掌握了一些语言后，就失去了学习的意愿，也从来
没有去了解什么是宏，或者如何利用宏。但任何语言的顶尖程序员总是被迫学习某种编程
的方法：宏。聪明、有决心且好奇的程序员最终都会选择 lisp，因为它是编写宏的最佳语言。


虽然优秀的程序员必然是少数，但随着整个编程人口的增长，优秀的程序员的数量也在增
加。编程界很少有程序员意识到宏的强大，了解的也很少，但这种情况正在改变。因为宏
能让生产力的倍增，无论世界是否准备好，宏的时代正在到来。 本书旨在为不可避免的未
来做一个基础准备：一个宏的世界。请做好准备。


属于宏的传统智慧是，只有在必要时才使用它们，因为它们可能难以理解，同时包含极其
微妙的错误。而且如果你把所有东西都看成是函数，这可能会以某些诧异的方式限制你。
这些并不是 lisp 宏系统本身的缺陷，而是一般宏编程的特征。和所有的技术一样，工具越
强大，滥用它的方法就越多。而且，就编程结构而言，lisp 的宏是最强大的工具。


一个有趣的类比就是，学习 lisp 的宏和学习 C 语言的指针一样。大多数 C 语言初学者都能
迅速掌握该语言的大部分。函数、类型、变量、算术表达式：从小学数学到简单的编程体验，
所有这些都与初学者以前可能有过的学习经历相似。但大多数C 程序员新手在学习指针时都
会碰壁。


指针是经验丰富的C程序员的第二天性，他们中的大多数人认为，要正确使用C语言，必须完
全理解指针。因为指针是如此的基础，在格式或学习目的上，大部分老练的C程序员不会在使
用方面有限制。尽管如此，许多C语言新手觉得指针是种不必要的复杂化，并避免使用它们，
从而出现在 FORTRAN 或其他语言中的症状，即有语言的重要特性被忽视。这种病症是对语
言特性的无知，而不是糟糕的编程风格。一旦充分理解了这些特性，正确的风格就会显而易见。
本书的一个次要主题，适用于任何编程语言，就是在编程中，编程风格不是直接追求的东西。
只有在理解缺失的情况下，风格才是必要的！


与C语言的指针一样，宏是lisp的一个特征，但人们对它的理解往往不深，如何正确使用宏的
智慧非常分散和理想化。如果在考虑宏的时候，你发现自己依赖于风格化的谚语，比如：

> 宏改变了lisp代码的语法。

> 宏作用于程序的解析树上。

> 只有在函数无法完成的情况下才使用宏。

当涉及到宏编程时，你可能没有一个整体的概念。而这正是本书希望解决的问题。


有关宏的构建，好的参考资料或教程比较少。Paul Graham的《On Lisp》是一个例外。对宏感
兴趣的人来说，《On Lisp》中的每一个字都是必读的。《On Lisp》和 Graham 的其他著作都
是你现在正在阅读的这本书的创作的重要灵感来源。正是因为 Paul Graham 和其他 lisp 作家的
努力，宏为程序员提供的力量被广泛讨论。然而不幸的是，它仍然被广泛误解。尽管从
《On Lisp》中可以得到有关宏编程的智慧，但很少有程序员将宏与他们现实生活中的编程问题
联系起来。就像《On Lisp》会告诉你不同类型的宏一样，本书会教你如何使用它们。


宏的编写是个反思和迭代的过程。复杂的宏都来自于较简单的宏，通常要经过一系列漫长的改进-
测试周期。更重要的是，识别在何处应用宏是种后天的技能，可通过编写宏来训练。当你写程序
时，作为一个有意识的人，无论你是否意识到，都在遵循某个系统和过程。程序员都有关于编程
工具如何工作的概念模型，而代码的创建则是这个概念模型的直接逻辑结果。一旦聪明的程序员
开始把编程行为视为一个逻辑程序，合乎逻辑的下一步就是让这个过程从自动化本身中受益。
毕竟，程序员接受的培训正是为了实现这一目标：使程序自动化。


理解宏的关键的第一步是认识到，如果没有仔细的计划和大量的努力，任何程序都会有多余的模式
和不灵活的抽象。这几乎在所有的大型软件项目中都可以看到，可能是重复的代码，或者是由于作
者没有正确的抽象概念而导致的不必要的复杂代码。有效使用宏需要识别这些模式和抽象，然后创
建代码来帮助你。仅仅了解如何编写宏是不够的；专业的lisp 程序员需要知道为什么要编写宏。


刚接触 lisp 的 C 程序员经常会犯这样的错误：认为宏的主要目的是提高代码在运行时的效率。虽然
宏在这个任务上往往非常有用，但到目前为止，宏最常见的用途是使编写所需应用程序的工作更容
易。由于大多数程序中的大部分模式都是重复复制的，且其抽象的通用性没有得到充分的利用，
因此适当设计的宏可以使编程在字面上有新的表达平面。其他语言是僵化和具体的，而 lisp 是流动
和通用的。


本书不是介绍 lisp 的。本书的主题和材料是针对那些对宏的作用感到好奇的非lisp语言的专业程序员，
以及那些准备真正学习lisp特别之处的中级lisp学员。本书假定有 lisp 编程的基础和中级知识，但对
闭包和宏的理解并没有太大的要求。


本书也不是关于理论的。所有的例子都涉及可运行的代码，这可以帮助改善你今后的编程。本书是
利用高级编程技术来帮助你更好地编程。与其他许多刻意使用简单编程风格以提高可读性的编程书籍
相比，本书认为教授编程的最佳方法是充分利用语言。尽管提供的许多代码示例使用了COMMON LISP
复杂的功能，但这种潜在的不熟悉的功能在使用时被描述。对于自检，如果你已经阅读并理解了
[第2章：闭包](../Chapter02/index.rst) 和 [第3章：宏基础](../Chapter03/index.rst) 中的所有内容，就本书而言，你可以认为自己已经过了理解
lisp的中间阶段。


学习 lisp 的部分是需要靠你自己去发掘，且本书不会剥夺你的这个权利。注意，本书的进度比大多数
书要快，比你之前的要快。要理解本书中的一些代码，你可能需要查阅其他COMMON LISP教程或参考
资料。在介绍完基础知识后，我们将直接进入解释一些迄今为止最先进的宏研究，其中大部分内容都是
在一个巨大的、未被开发的灰色区域的知识领域中。就像所有的高级宏编程一样，本书在很大程度上关
注宏的组合。这个话题有个可怕的名声，很少有程序员能很好地理解它。宏的组合代表了当今编程语言
中最广阔、最肥沃的研究领域。学术界已经从类型、对象和 `prolog`式逻辑中得出了大部分
有趣的结果，但宏编程仍然是个巨大的、有缺口的黑洞。没有人真正知道后面是什么。我们所知道的是，
是的，它很复杂，很可怕，目前看来潜力无穷。与其他太多的编程理念不同，宏既不是用来发表无用
理论文章的学术概念，也不是空洞的企业软件流行语。宏是黑客的最好朋友。宏让你的编程更聪明，
而不是更难。大多数程序员在了解了宏之后，都不想在没有宏的情况下进行编程。


> `prolog` 是一种逻辑编程语言。它创建在逻辑学的理论基础之上， 诞生与 1972 年，最初被运用于
> 自然语言等研究领域，具体介绍请参考：[https://en.wikipedia.org/wiki/Prolog](https://en.wikipedia.org/wiki/Prolog)



虽然大多数lisp书籍都是为了让lisp更受欢迎而写的，但我完全不关心lisp的日常公众吸引力。lisp并没有
消失。如果我可以在余下的编程生涯中继续使用lisp作为秘密武器，我将会非常高兴。如果这本书只有
一个目的，那就是激发人们对宏的学习和研究，就像我在《On Lisp》中受到的启发一样。我希望本书的
读者也能受到这样的启发，以至于有一天我可能会享受到更好的lisp宏工具和更有趣的lisp宏书籍。


> 仍然对lisp的力量感到敬畏。
> 你们谦卑的作者。
> Doug Hoyte
