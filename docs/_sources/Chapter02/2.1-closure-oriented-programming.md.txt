# 2.1 面向闭包编程

---

Author: Doug Hoyte <[doug@hoytech.com](mailto:doug@hoytech.com)>

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle%40outlook.com)>

---

> 我们得到的一个结论是：在编程语言中，“对象（object）”没必要作为原语（primitive notion）：只需用可赋值单元和好的老式的 lambda 表达式就可以构建对象及其行为。 —— Guy Steele 设计 Scheme 时说的话

这种 lambda 表达式有时叫做闭包，有时叫做已保存的词法环境。 或者，像我们中的一些人喜欢说的，let over lambda。 无论怎么称呼，掌握闭包的概念是成为专业 lisp 程序员的第一步。 事实上，这项技能对于正确使用许多现代编程语言至关重要，即使是那些没有明确包含 let 或 lambda 的语言，例如 Perl 或 Javascript。


闭包是少有的奇怪概念之一，因为它们太简单了，而与之自相矛盾的是，掌握起来很难。一旦程序员习惯了用复杂的方来解决问题时，用简单的方法解决同样的问题时就会感到不完整和不舒服。但是，我们很快就会看到，对于如何组织数据和代码，闭包比对象更简单、更直接。比简单更重要的是，闭包是在构造宏时的更好的抽象——这也是本书的主题。


我们可以使用闭包原语构建对象和类这一事实并不意味着对象系统对 lisp 程序员毫无用处。 恰恰相反。 事实上，COMMON LISP 包括有史以来最强大的对象系统：CLOS，即 COMMON LISP 对象系统。 虽然我对 CLOS 的灵活性和特性印象深刻，但我很少发现需要使用其更高级的特性，这要归功于可分配的值单元和好的旧 lambda 表达式。


虽然本书的大部分内容都假定你具有合理的 lisp 技能水平，但本章试图从最基础的角度教授闭包的理论和使用，并提供将在本书其余部分中使用的闭包通用术语。 本章还检查了闭包的效率影响，并考虑了现代编译器对它们的优化程度。
