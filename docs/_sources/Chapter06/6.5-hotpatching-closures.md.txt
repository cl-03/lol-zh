# 6.5 热修复闭包

---

Author: Doug Hoyte <[doug@hoytech.com](mailto:doug@hoytech.com)>

Translator: Yuqi Liu <[yuqi.lyle@outlook.com](mailto:yuqi.lyle@outlook.com)>

---

本节的目的有三个。首先，介绍 `alet` 中 `this` 回指的另一个有趣的用法。其次，讨论了
 _let over dlambda_ 。最后，介绍了一种很有用的宏技术，称为回指闭合（ _anaphor closing_ ）。
要详细说明回指闭合，将不用 `alet` 宏，而是使用一个由内而外的展开。`alet-hotpatch%`
是 `alet` 的拓展，有个一个特殊的 lambda 结构。该 `lambda` 结构检查第一个参数是否为关
键字符号 `:hotpatch`，如果是，则用另一个参数替换间接闭包。
```
(defmacro alet-hotpatch% (letargs &rest body)
  `(let ((this) ,@letargs)
      (setq this ,@(last body))
      ,@(butlast body)
      (lambda (&rest args)
        (if (eq (car args) ':hotpatch)
          (setq this (cadr args))
          (apply this args)))))
```
在运行时更改另一个转发闭包中使用的闭包称为热补丁（ _hotpatching_ ）。例如，这里我们创建
了一个热补丁闭包，并将其存储在 `hotpatch-test` 的 `symbol-function` 单元格中，以便
之后使用：
```
* (setf (symbol-function 'hotpatch-test)
    (alet-hotpatch% ((acc 0))
      (lambda (n)
        (incf acc n))))

#<Interpreted Function>
```
现在可以这样使用:
```
* (hotpatch-test 3)

3
* (hotpatch-test 4)

7
```
可以用 `:hotpatch` 和替换函数或闭包来替换 lambda 结构及其相关的环境:
```
* (hotpatch-test
    :hotpatch
    (let ((acc 0))
      (lambda (n)
        (incf acc (* 2 n)))))

#<Interpreted Function>
```
现在闭包有了新的、热补丁的行为：
```
* (hotpatch-test 2)

4
* (hotpatch-test 5)

14
```
注意计数器的值是怎么置为 0 的，因为我们还用计数器的累加器 `acc` 的新值热补丁了闭包的环境。
之前见过这种关键字符号的运行时解构吗？没错，实际上在 [5.7 Dlambda](../Chapter05/5.7-dlambda.md)中编写了个宏来完成这个
操作。`alet-hotpatch` 是 `alet-hotpatch%` 的 `dlambda` 版本。有时甚至在没有意识到的
情况下，在新的宏定义中会用到之前定义的宏，这就是宏组合（ _macro combination_ ）。使用精心
设计的宏可以完全理解扩展，尽管在许多方面可能违背词汇透明性，但不会出现组合问题，因为
所有组件都能有意义地组合在一起。
```
(defmacro! alet-hotpatch (letargs &rest body)
  `(let ((,g!this) ,@letargs)
    (setq ,g!this ,@(last body))
    ,@(butlast body)
    (dlambda
        (:hotpatch (closure)
          (setq ,g!this closure))
        (t (&rest args)
          (apply ,g!this args)))))
```
`alet-hotpatch` 创建了个可热补的闭包，但在概念上有一个小缺陷。因为使用 `alet-hotpatch`
的唯一真正原因是创建这种热补丁闭包，但可能忘了，它还将 `this` 回指引入到所提供的作用域中。
当忘了创建的的回指时，就有未知变量捕获问题的风险。为了避免这些问题，可以使用一种回指闭合
的技术。当要结束一个回指时，我们不需要改变回指宏的功能，只是限制他们组合的方式。


因为已经把 `alet` 展开从内到外看了一遍，我们可以在 `alet-hotpatch` 的定义中看到 `this` 回指
的创建。同时也因为 `alet-hotpatch` 中用了 `this` 回指实现 `hotpatch` 代码，所以就可以关闭
回指，这样 `this` 变量就不再被宏捕获了。通常该如何避免引入预期之外的绑定？当然，可以用
gensyms 来命名绑定。
```
(defmacro! let-hotpatch (letargs &rest body)
  `(let ((,g!this) ,@letargs)
    (setq ,g!this ,@(last body))
    ,@(butlast body)
    (dlambda
      (:hotpatch (closure)
        (setq ,g!this closure))
      (t (&rest args)
        (apply ,g!this args)))))
```
`let-hotpatch` 是将 `this` 回指闭合为一个更包含的版本的示例 —— 一个在只需要进行热补时，更
安全的版本。删掉了名字前面的 `a`，表示这个新宏不再在代码中引入回指。当然，如果出于某种原因
而不是因为热补而想引用 `this`，就应该保留这个回指。


当写了足够多类似的宏后，这种开启和关闭回指的技巧就变成了第二天性。就像在编写宏时，在插入
自由变量时不会想到该如何捕获它们，直到写的词法内容会展开，有时，在开发回指组合和自由变量
插入宏试验时，会放任回指不管。一旦找到了最适用的组合，就可以将宏合并在一起，用 gensyms
替换开发过程中使用的所有回指。像 `let-hotpatch` 一样，该技术可以用 `defmacro!` 将回指的
作用域从宏展开移到宏定义。我们没有从词法上引入回指，而是引入了另一种类型的回指 —— 这种
回指并不是在展开的整个词法作用域内起生效，而只在另一个有限的范围内生效。下节将进一步讲解
这个有效范围。
